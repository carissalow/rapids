{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RAPIDS documentation","text":"<p>Reproducible Analysis Pipeline for Data Streams (RAPIDS) allows you to process smartphone and wearable data to extract and create behavioral features (a.k.a. digital biomarkers), visualize mobile sensor data and structure your analysis into reproducible workflows.</p> <p>RAPIDS is open source, documented, modular, tested, and reproducible. At the moment we support smartphone data collected with AWARE and wearable data from Fitbit devices.</p> <p>Tip</p> <p> Questions or feedback can be posted on the #rapids channel in AWARE Framework's slack. </p> <p> Bugs and feature requests should be posted on Github. </p> <p>:fontawesome-solid-tasks: Join our discussions on our algorithms and assumptions for feature processing.</p> <p> Ready to start? Go to Installation, then to Configuration, and then to Execution</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>RAPIDS is formed by R and Python scripts orchestrated by Snakemake. We suggest you read Snakemake\u2019s docs but in short: every link in the analysis chain is atomic and has files as input and output. Behavioral features are processed per sensor and per participant.</p>"},{"location":"#what-are-the-benefits-of-using-rapids","title":"What are the benefits of using RAPIDS?","text":"<ol> <li>Consistent analysis. Every participant sensor dataset is analyzed in the exact same way and isolated from each other.</li> <li>Efficient analysis. Every analysis step is executed only once. Whenever your data or configuration changes only the affected files are updated.</li> <li>Parallel execution. Thanks to Snakemake, your analysis can be executed over multiple cores without changing your code.</li> <li>Code-free features. Extract any of the behavioral features offered by RAPIDS without writing any code.</li> <li>Extensible code. You can easily add your own behavioral features in R or Python, share them with the community, and keep authorship and citations.</li> <li>Timezone aware. Your data is adjusted to the specified timezone (multiple timezones suport coming soon).</li> <li>Flexible time segments. You can extract behavioral features on time windows of any length (e.g. 5 minutes, 3 hours, 2 days), on every day or particular days (e.g. weekends, Mondays, the 1<sup>st</sup> of each month, etc.) or around events of interest (e.g. surveys or clinical relapses).</li> <li>Tested code. We are constantly adding tests to make sure our behavioral features are correct.</li> <li>Reproducible code. If you structure your analysis within RAPIDS, you can be sure your code will run in other computers as intended thanks to R and Python virtual environments. You can share your analysis code along your publications without any overhead.</li> <li>Private. All your data is processed locally.</li> </ol>"},{"location":"#how-is-it-organized","title":"How is it organized?","text":"<p>In broad terms the <code>config.yaml</code>, <code>.env</code> file, participants files, and time segment files are the only ones that you will have to modify. All data is stored in <code>data/</code> and all scripts are stored in <code>src/</code>. For more information see RAPIDS\u2019 File Structure.</p>"},{"location":"change-log/","title":"Change Log","text":""},{"location":"change-log/#v026","title":"v0.2.6","text":"<ul> <li>Fix old versions banner on nested pages</li> </ul>"},{"location":"change-log/#v025","title":"v0.2.5","text":"<ul> <li>Fix docs deploy typo</li> </ul>"},{"location":"change-log/#v024","title":"v0.2.4","text":"<ul> <li>Fix broken links in landing page and docs deploy</li> </ul>"},{"location":"change-log/#v023","title":"v0.2.3","text":"<ul> <li>Fix participant IDS in the example analysis workflow</li> </ul>"},{"location":"change-log/#v022","title":"v0.2.2","text":"<ul> <li>Fix readme link to docs</li> </ul>"},{"location":"change-log/#v021","title":"v0.2.1","text":"<ul> <li>FIx link to the most recent version in the old version banner</li> </ul>"},{"location":"change-log/#v020","title":"v0.2.0","text":"<ul> <li>Add new <code>PHONE_BLUETOOTH</code> <code>DORYAB</code> provider</li> <li>Deprecate <code>PHONE_BLUETOOTH</code> <code>RAPIDS</code> provider</li> <li>Fix bug in <code>filter_data_by_segment</code> for Python when dataset was empty</li> <li>Minor doc updates</li> <li>New FAQ item</li> </ul>"},{"location":"change-log/#v010","title":"v0.1.0","text":"<ul> <li>New and more consistent docs (this website). The previous docs are marked as beta </li> <li>Consolidate configuration instructions</li> <li>Flexible time segments</li> <li>Simplify Fitbit behavioral feature extraction and documentation</li> <li>Sensor\u2019s configuration and output is more consistent</li> <li>Update visualizations to handle flexible day segments</li> <li>Create a RAPIDS execution script that allows re-computation of the pipeline after configuration changes</li> <li>Add citation guide</li> <li>Update virtual environment guide</li> <li>Update analysis workflow example</li> <li>Add a Code of Conduct</li> <li>Update Team page</li> </ul>"},{"location":"citation/","title":"Cite RAPIDS and providers","text":"<p>RAPIDS and the community</p> <p>RAPIDS is a community effort and as such we want to continue recognizing the contributions from other researchers. Besides citing RAPIDS, we ask you to cite any of the authors listed below if you used those sensor providers in your analysis, thank you!</p>"},{"location":"citation/#rapids","title":"RAPIDS","text":"<p>If you used RAPIDS, please cite this paper.</p> <p>RAPIDS et al. citation</p> <p>Vega J, Li M, Aguillera K, Goel N, Joshi E, Durica KC, Kunta AR, Low CA RAPIDS: Reproducible Analysis Pipeline for Data Streams Collected with Mobile Devices JMIR Preprints. 18/08/2020:23246 DOI: 10.2196/preprints.23246 URL: https://preprints.jmir.org/preprint/23246</p>"},{"location":"citation/#panda-accelerometer","title":"Panda (accelerometer)","text":"<p>If you computed accelerometer features using the provider  <code>[PHONE_ACCLEROMETER][PANDA]</code> cite this paper in addition to RAPIDS.</p> <p>Panda et al. citation</p> <p>Panda N, Solsky I, Huang EJ, Lipsitz S, Pradarelli JC, Delisle M, Cusack JC, Gadd MA, Lubitz CC, Mullen JT, Qadan M, Smith BL, Specht M, Stephen AE, Tanabe KK, Gawande AA, Onnela JP, Haynes AB. Using Smartphones to Capture Novel Recovery Metrics After Cancer Surgery. JAMA Surg. 2020 Feb 1;155(2):123-129. doi: 10.1001/jamasurg.2019.4702. PMID: 31657854; PMCID: PMC6820047.</p>"},{"location":"citation/#stachl-applications-foreground","title":"Stachl (applications foreground)","text":"<p>If you computed applications foreground features using the app category (genre) catalogue in  <code>[PHONE_APPLICATIONS_FOREGROUND][RAPIDS]</code> cite this paper in addition to RAPIDS.</p> <p>Stachl et al. citation</p> <p>Clemens Stachl, Quay Au, Ramona Schoedel, Samuel D. Gosling, Gabriella M. Harari, Daniel Buschek, Sarah Theres V\u00f6lkel, Tobias Schuwerk, Michelle Oldemeier, Theresa Ullmann, Heinrich Hussmann, Bernd Bischl, Markus B\u00fchner. Proceedings of the National Academy of Sciences Jul 2020, 117 (30) 17680-17687; DOI: 10.1073/pnas.1920484117 </p>"},{"location":"citation/#doryab-bluetooth","title":"Doryab (bluetooth)","text":"<p>If you computed bluetooth features using the provider <code>[PHONE_BLUETOOTH][DORYAB]</code> cite this paper in addition to RAPIDS.</p> <p>Doryab et al. citation</p> <p>Doryab, A., Chikarsel, P., Liu, X., &amp; Dey, A. K. (2019). Extraction of Behavioral Features from Smartphone and Wearable Data. ArXiv:1812.10394 [Cs, Stat]. http://arxiv.org/abs/1812.10394</p>"},{"location":"citation/#barnett-locations","title":"Barnett (locations)","text":"<p>If you computed locations features using the provider <code>[PHONE_LOCATIONS][BARNETT]</code> cite this paper and this paper in addition to RAPIDS.</p> <p>Barnett et al. citation</p> <p>Ian Barnett, Jukka-Pekka Onnela, Inferring mobility measures from GPS traces with missing data, Biostatistics, Volume 21, Issue 2, April 2020, Pages e98\u2013e112, https://doi.org/10.1093/biostatistics/kxy059</p> <p>Canzian et al. citation</p> <p>Luca Canzian and Mirco Musolesi. 2015. Trajectories of depression: unobtrusive monitoring of depressive states by means of smartphone mobility traces analysis. In Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing (UbiComp \u201815). Association for Computing Machinery, New York, NY, USA, 1293\u20131304. DOI:https://doi.org/10.1145/2750858.2805845</p>"},{"location":"citation/#doryab-locations","title":"Doryab (locations)","text":"<p>If you computed locations features using the provider <code>[PHONE_LOCATIONS][DORYAB]</code> cite this paper and this paper in addition to RAPIDS.</p> <p>Doryab et al. citation</p> <p>Doryab, A., Chikarsel, P., Liu, X., &amp; Dey, A. K. (2019). Extraction of Behavioral Features from Smartphone and Wearable Data. ArXiv:1812.10394 [Cs, Stat]. http://arxiv.org/abs/1812.10394</p> <p>Canzian et al. citation</p> <p>Luca Canzian and Mirco Musolesi. 2015. Trajectories of depression: unobtrusive monitoring of depressive states by means of smartphone mobility traces analysis. In Proceedings of the 2015 ACM International Joint Conference on Pervasive and Ubiquitous Computing (UbiComp \u201815). Association for Computing Machinery, New York, NY, USA, 1293\u20131304. DOI:https://doi.org/10.1145/2750858.2805845</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others\u2019 private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at moshi@pitt.edu. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by  Mozilla\u2019s code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available  at https://www.contributor-covenant.org/translations.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#cannot-connect-to-your-mysql-server","title":"Cannot connect to your MySQL server","text":"Problem <pre><code>**Error in .local(drv, \\...) :** **Failed to connect to database: Error:\nCan\\'t initialize character set unknown (path: compiled\\_in)** :\n\nCalls: dbConnect -&gt; dbConnect -&gt; .local -&gt; .Call\nExecution halted\n[Tue Mar 10 19:40:15 2020]\nError in rule download_dataset:\n    jobid: 531\n    output: data/raw/p60/locations_raw.csv\n\nRuleException:\nCalledProcessError in line 20 of /home/ubuntu/rapids/rules/preprocessing.snakefile:\nCommand 'set -euo pipefail;  Rscript --vanilla /home/ubuntu/rapids/.snakemake/scripts/tmp_2jnvqs7.download_dataset.R' returned non-zero exit status 1.\nFile \"/home/ubuntu/rapids/rules/preprocessing.snakefile\", line 20, in __rule_download_dataset\nFile \"/home/ubuntu/anaconda3/envs/moshi-env/lib/python3.7/concurrent/futures/thread.py\", line 57, in run\nShutting down, this might take some time.\nExiting because a job execution failed. Look above for error message\n</code></pre> Solution <p>Please make sure the <code>DATABASE_GROUP</code> in <code>config.yaml</code> matches your DB credentials group in <code>.env</code>.</p>"},{"location":"faq/#cannot-start-mysql-in-linux-via-brew-services-start-mysql","title":"Cannot start mysql in linux via <code>brew services start mysql</code>","text":"Problem <p>Cannot start mysql in linux via <code>brew services start mysql</code></p> Solution <p>Use <code>mysql.server start</code></p>"},{"location":"faq/#every-time-i-run-force-the-download_dataset-rule-all-rules-are-executed","title":"Every time I run force the download_dataset rule all rules are executed","text":"Problem <p>When running <code>snakemake -j1 -R download_phone_data</code> or <code>./rapids -j1 -R download_phone_data</code> all the rules and files are re-computed</p> Solution <p>This is expected behavior. The advantage of using <code>snakemake</code> under the hood is that every time a file containing data is modified every rule that depends on that file will be re-executed to update their results. In this case, since <code>download_dataset</code> updates all the raw data, and you are forcing the rule with the flag <code>-R</code> every single rule that depends on those raw files will be executed.</p>"},{"location":"faq/#error-table-xxx-doesnt-exist-while-running-the-download_phone_data-or-download_fitbit_data-rule","title":"Error <code>Table XXX doesn't exist</code> while running the <code>download_phone_data</code> or <code>download_fitbit_data</code> rule.","text":"Problem <pre><code>Error in .local(conn, statement, ...) : \n  could not run statement: Table 'db_name.table_name' doesn't exist\nCalls: colnames ... .local -&gt; dbSendQuery -&gt; dbSendQuery -&gt; .local -&gt; .Call\nExecution halted\n</code></pre> Solution <p>Please make sure the sensors listed in <code>[PHONE_VALID_SENSED_BINS][PHONE_SENSORS]</code> and the <code>[TABLE]</code> of each sensor you activated in <code>config.yaml</code>  match your database tables.</p>"},{"location":"faq/#how-do-i-install-rapids-on-ubuntu-1604","title":"How do I install RAPIDS on Ubuntu 16.04","text":"Solution <ol> <li> <p>Install dependencies (Homebrew - if not installed):</p> <ul> <li><code>sudo apt-get install libmariadb-client-lgpl-dev libxml2-dev libssl-dev</code></li> <li>Install brew for linux and add the following line to <code>~/.bashrc</code>: <code>export PATH=$HOME/.linuxbrew/bin:$PATH</code></li> <li><code>source ~/.bashrc</code></li> </ul> </li> <li> <p>Install MySQL</p> <ul> <li><code>brew install mysql</code></li> <li><code>brew services start mysql</code></li> </ul> </li> <li> <p>Install R, pandoc and rmarkdown:</p> <ul> <li><code>brew install r</code></li> <li><code>brew install gcc@6</code> (needed due to this bug)</li> <li><code>HOMEBREW_CC=gcc-6 brew install pandoc</code></li> </ul> </li> <li> <p>Install miniconda using these instructions</p> </li> <li> <p>Clone our repo:</p> <ul> <li><code>git clone https://github.com/carissalow/rapids</code></li> </ul> </li> <li> <p>Create a python virtual environment:</p> <ul> <li><code>cd rapids</code></li> <li><code>conda env create -f environment.yml -n MY_ENV_NAME</code></li> <li><code>conda activate MY_ENV_NAME</code></li> </ul> </li> <li> <p>Install R packages and virtual environment:</p> <ul> <li><code>snakemake renv_install</code></li> <li><code>snakemake renv_init</code></li> <li><code>snakemake renv_restore</code></li> </ul> <p>This step could take several minutes to complete. Please be patient and let it run until completion.</p> </li> </ol>"},{"location":"faq/#mysqlh-cannot-be-found","title":"<code>mysql.h</code> cannot be found","text":"Problem <pre><code>--------------------------[ ERROR MESSAGE ]----------------------------\n&lt;stdin&gt;:1:10: fatal error: mysql.h: No such file or directory\ncompilation terminated.\n-----------------------------------------------------------------------\nERROR: configuration failed for package 'RMySQL'\n</code></pre> Solution <pre><code>sudo apt install libmariadbclient-dev\n</code></pre>"},{"location":"faq/#no-package-libcurl-found","title":"No package <code>libcurl</code> found","text":"Problem <p><code>libcurl</code> cannot be found</p> Solution <p>Install <code>libcurl</code> <pre><code>sudo apt install libcurl4-openssl-dev\n</code></pre></p>"},{"location":"faq/#configuration-failed-because-openssl-was-not-found","title":"Configuration failed because <code>openssl</code> was not found.","text":"Problem <p><code>openssl</code> cannot be found</p> Solution <p>Install <code>openssl</code> <pre><code>sudo apt install libssl-dev\n</code></pre></p>"},{"location":"faq/#configuration-failed-because-libxml-20-was-not-found","title":"Configuration failed because <code>libxml-2.0</code> was not found","text":"Problem <p><code>libxml-2.0</code> cannot be found</p> Solution <p>Install <code>libxml-2.0</code> <pre><code>sudo apt install libxml2-dev\n</code></pre></p>"},{"location":"faq/#ssl-connection-error-when-running-rapids","title":"SSL connection error when running RAPIDS","text":"Problem <p>You are getting the following error message when running RAPIDS: <pre><code>Error: Failed to connect: SSL connection error: error:1425F102:SSL routines:ssl_choose_client_version:unsupported protocol.\n</code></pre></p> Solution <p>This is a bug in Ubuntu 20.04 when trying to connect to an old MySQL server with MySQL client 8.0. You should get the same error message if you try to connect from the command line. There you can add the option <code>--ssl-mode=DISABLED</code> but we can't do this from the R connector.</p> <p>If you can't update your server, the quickest solution would be to import your database to another server or to a local environment. Alternatively, you could replace <code>mysql-client</code> and <code>libmysqlclient-dev</code> with <code>mariadb-client</code> and <code>libmariadbclient-dev</code> and reinstall renv. More info about this issue here</p>"},{"location":"faq/#db_tables-key-not-found","title":"<code>DB_TABLES</code> key not found","text":"Problem <p>If you get the following error <code>KeyError in line 43 of preprocessing.smk: 'PHONE_SENSORS'</code>, it means that the indentation of the key <code>[PHONE_SENSORS]</code> is not matching the other child elements of <code>PHONE_VALID_SENSED_BINS</code></p> Solution <p>You need to add or remove any leading whitespaces as needed on that line.</p> <pre><code>PHONE_VALID_SENSED_BINS:\n    COMPUTE: False # This flag is automatically ignored (set to True) if you are extracting PHONE_VALID_SENSED_DAYS or screen or Barnett's location features\n    BIN_SIZE: &amp;bin_size 5 # (in minutes)\n    PHONE_SENSORS: []\n</code></pre>"},{"location":"faq/#error-while-updating-your-conda-environment-in-ubuntu","title":"Error while updating your conda environment in Ubuntu","text":"Problem <p>You get the following error: <pre><code>CondaMultiError: CondaVerificationError: The package for tk located at /home/ubuntu/miniconda2/pkgs/tk-8.6.9-hed695b0_1003\n    appears to be corrupted. The path 'include/mysqlStubs.h'\n    specified in the package manifest cannot be found.\nClobberError: This transaction has incompatible packages due to a shared path.\n    packages: conda-forge/linux-64::llvm-openmp-10.0.0-hc9558a2_0, anaconda/linux-64::intel-openmp-2019.4-243\n    path: 'lib/libiomp5.so'\n</code></pre></p> Solution <p>Reinstall conda</p>"},{"location":"faq/#embedded-nul-in-string","title":"Embedded nul in string","text":"Problem <p>You get the following error when downloading sensor data: <pre><code>Error in result_fetch(res@ptr, n = n) : \n  embedded nul in string:\n</code></pre></p> Solution <p>This problem is due to the way <code>RMariaDB</code> handles a mismatch between data types in R and MySQL (see this issue). Since it seems this problem won\u2019t be handled by <code>RMariaDB</code>, you have two options:</p> <ol> <li>If it\u2019s only a few rows that are causing this problem, remove the the null character from the conflictive table cell.</li> <li>If it\u2019s not feasible to modify your data you can try swapping <code>RMariaDB</code> with <code>RMySQL</code>. Just have in mind you might have problems connecting to modern MySQL servers running in Liunx:<ul> <li>Add <code>RMySQL</code> to the renv environment by running the following command in a terminal open on RAPIDS root folder <pre><code>R -e 'renv::install(\"RMySQL\")'\n</code></pre></li> <li>Go to <code>src/data/download_phone_data.R</code> and replace <code>library(RMariaDB)</code> with <code>library(RMySQL)</code></li> <li>In the same file replace <code>dbEngine &lt;- dbConnect(MariaDB(), default.file = \"./.env\", group = group)</code> with <code>dbEngine &lt;- dbConnect(MySQL(), default.file = \"./.env\", group = group)</code></li> </ul> </li> </ol>"},{"location":"file-structure/","title":"File Structure","text":"<p>Tip</p> <ul> <li>Read this page if you want to learn more about how RAPIDS is structured. If you want to start using it go to Installation, then to Configuration, and then to Execution</li> <li>All paths mentioned in this page are relative to RAPIDS\u2019 root folder.</li> </ul> <p>If you want to extract the behavioral features that RAPIDS offers, you will only have to create or modify the <code>.env</code> file, participants files, time segment files, and the <code>config.yaml</code> file as instructed in the Configuration page. The <code>config.yaml</code> file is the heart of RAPIDS and includes parameters to manage participants, data sources, sensor data, visualizations and more.</p> <p>All data is saved in <code>data/</code>. The <code>data/external/</code> folder stores any data imported or created by the user, <code>data/raw/</code> stores sensor data as imported from your database, <code>data/interim/</code> has intermediate files necessary to compute behavioral features from raw data, and <code>data/processed/</code> has all the final files with the behavioral features in folders per participant and sensor.</p> <p>RAPIDS source code is saved in <code>src/</code>. The <code>src/data/</code> folder stores scripts to download, clean and pre-process sensor data, <code>src/features</code> has scripts to extract behavioral features organized in their respective sensor subfolders , <code>src/models/</code> can host any script to create models or statistical analyses with the behavioral features you extract, and <code>src/visualization/</code> has scripts to create plots of the raw and processed data. There are other files and folders but only relevant if you are interested in extending RAPIDS (e.g. virtual env files, docs, tests, Dockerfile, the Snakefile, etc.). </p> <p>In the figure below, we represent the interactions between users and files. After a user modifies the configuration files mentioned above, the <code>Snakefile</code> file will search for and execute the Snakemake rules that contain the Python or R scripts necessary to generate or update the required output files (behavioral features, plots, etc.).</p> Interaction diagram between the user, and important files in RAPIDS"},{"location":"migrating-from-old-versions/","title":"Migrating from RAPIDS beta","text":"<p>If you were relying on the old docs and the most recent version of RAPIDS you are working with is from or before Oct 13, 2020 you are using the beta version of RAPIDS.</p> <p>You can start using the new RAPIDS (we are starting with <code>v0.1.0</code>) right away, just take into account the following:</p> <ol> <li>Install a new copy of RAPIDS (the R and Python virtual environments didn\u2019t change so the cached versions will be reused)<ol> <li>Make sure you don\u2019t skip a new Installation step to give execution permissions to the RAPIDS script: <code>chmod +x rapids</code></li> </ol> </li> <li>Follow the new Configuration guide.<ol> <li>You can copy and paste your old <code>.env</code> file</li> <li>You can migrate your old participant files:    <pre><code>python tools/update_format_participant_files.py\n</code></pre></li> </ol> </li> <li>Get familiar with the new way of Executing RAPIDS</li> <li>You can proceed to reconfigure your <code>config.yaml</code>, its structure is more consistent and should be familiar to you.</li> </ol> <p>Info</p> <p>If you have any questions reach out to us on Slack.</p>"},{"location":"team/","title":"RAPIDS Team","text":"<p>If you are interested in contributing feel free to submit a pull request or contact us.</p>"},{"location":"team/#core-team","title":"Core Team","text":""},{"location":"team/#julio-vega-designer-and-lead-developer","title":"Julio Vega (Designer and Lead Developer)","text":"About <p>Julio Vega is a postdoctoral associate at the Mobile Sensing + Health Institute. He is interested in personalized methodologies to monitor chronic conditions that affect daily human behavior using mobile and wearable data.</p> <ul> <li>vegaju at upmc . edu</li> <li>Personal Website</li> </ul>"},{"location":"team/#meng-li","title":"Meng Li","text":"About <p>Meng Li received her Master of Science degree in Information Science from the University of Pittsburgh. She is interested in applying machine learning algorithms to the medical field.</p> <ul> <li>lim11 at upmc . edu</li> <li>Linkedin Profile</li> <li>Github Profile</li> </ul>"},{"location":"team/#abhineeth-reddy-kunta","title":"Abhineeth Reddy Kunta","text":"About <p>Abhineeth Reddy Kunta is a Senior Software Engineer with the Mobile Sensing + Health Institute. He is experienced in software development and specializes in building solutions using machine learning. Abhineeth likes exploring ways to leverage technology in advancing medicine and education. Previously he worked as a Computer Programmer at Georgia Department of Public Health. He has a master\u2019s degree in Computer Science from George Mason University.</p>"},{"location":"team/#kwesi-aguillera","title":"Kwesi Aguillera","text":"About <p>Kwesi Aguillera is currently in his first year at the University of Pittsburgh pursuing a Master of Sciences in Information Science specializing in Big Data Analytics. He received his Bachelor of Science degree in Computer Science and Management from the University of the West Indies. Kwesi considers himself a full stack developer and looks forward to applying this knowledge to big data analysis.</p> <ul> <li>Linkedin Profile</li> </ul>"},{"location":"team/#echhit-joshi","title":"Echhit Joshi","text":"About <p>Echhit Joshi is a Masters student at the School of Computing and Information at University of Pittsburgh. His areas of interest are Machine/Deep Learning, Data Mining, and Analytics.</p> <ul> <li>Linkedin Profile</li> </ul>"},{"location":"team/#nicolas-leo","title":"Nicolas Leo","text":"About <p>Nicolas is a rising senior studying computer science at the University of Pittsburgh. His academic interests include databases, machine learning, and application development. After completing his undergraduate degree, he plans to attend graduate school for a MS in Computer Science with a focus on Intelligent Systems.</p>"},{"location":"team/#nikunj-goel","title":"Nikunj Goel","text":"About <p>Nik is a graduate student at the University of Pittsburgh pursuing Master of Science in Information Science. He earned his Bachelor of Technology degree in Information Technology from India. He is a Data Enthusiasts and passionate about finding the meaning out of raw data. In a long term, his goal is to create a breakthrough in Data Science and Deep Learning.</p> <ul> <li>Linkedin Profile</li> </ul>"},{"location":"team/#community-contributors","title":"Community Contributors","text":""},{"location":"team/#agam-kumar","title":"Agam Kumar","text":"About <p>Agam is a junior at Carnegie Mellon University studying Statistics and Machine Learning and pursuing an additional major in Computer Science. He is a member of the Data Science team in the Health and Human Performance Lab at CMU and has keen interests in software development and data science. His research interests include ML applications in medicine.</p> <ul> <li>Linkedin Profile</li> <li>Github Profile</li> </ul>"},{"location":"team/#yasaman-s-sefidgar","title":"Yasaman S. Sefidgar","text":"About <ul> <li>Linkedin Profile</li> </ul>"},{"location":"team/#advisors","title":"Advisors","text":""},{"location":"team/#afsaneh-doryab","title":"Afsaneh Doryab","text":"About <ul> <li>Personal Website</li> </ul>"},{"location":"team/#carissa-low","title":"Carissa Low","text":"About <ul> <li>Profile</li> </ul>"},{"location":"developers/documentation/","title":"Documentation","text":"<p>We use mkdocs with the material theme to write these docs. Whenever you make any changes, just push them back to the repo and the documentation will be deployed automatically.</p>"},{"location":"developers/documentation/#set-up-development-environment","title":"Set up development environment","text":"<ol> <li>Make sure your conda environment is active</li> <li><code>pip install mkdocs</code></li> <li><code>pip install mkdocs-material</code></li> </ol>"},{"location":"developers/documentation/#preview","title":"Preview","text":"<p>Run the following command in RAPIDS root folder and go to http://127.0.0.1:8000:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developers/documentation/#file-structure","title":"File Structure","text":"<p>The documentation config file is <code>/mkdocs.yml</code>, if you are adding new <code>.md</code> files to the docs modify the <code>nav</code> attribute at the bottom of that file. You can use the hierarchy there to find all the files that appear in the documentation.</p>"},{"location":"developers/documentation/#reference","title":"Reference","text":"<p>Check this page to get familiar with the different visual elements we can use in the docs (admonitions, code blocks, tables, etc.) You can also refer to <code>/docs/setup/installation.md</code> and <code>/docs/setup/configuration.md</code> to see practical examples of these elements.</p> <p>Hint</p> <p>Any links to internal pages should be relative to the current page. For example, any link from this page (documentation) which is inside <code>./developers</code> should begin with <code>../</code> to go one folder level up like: <pre><code>[mylink](../setup/installation.md)\n</code></pre></p>"},{"location":"developers/documentation/#extras","title":"Extras","text":"<p>You can insert emojis using this syntax <code>:[SOURCE]-[ICON_NAME]</code> from the following sources:</p> <ul> <li>https://materialdesignicons.com/</li> <li>https://fontawesome.com/icons/tasks?style=solid</li> <li>https://primer.style/octicons/</li> </ul> <p>You can use this page to create markdown tables more easily</p>"},{"location":"developers/git-flow/","title":"Git Flow","text":"<p>We use the <code>develop/master</code> variation of the OneFlow git flow</p>"},{"location":"developers/git-flow/#add-new-features","title":"Add New Features","text":"<p>We use feature (topic) branches to implement new features</p> <ol> <li>Pull the latest develop  <pre><code>git checkout develop\ngit pull\n</code></pre></li> <li>Create your feature branch <pre><code>git checkout -b feature/feature1\n</code></pre></li> <li>Add, modify or delete the necessary files to add your new feature</li> <li>Update the change log (<code>docs/change-log.md</code>)</li> <li>Stage and commit your changes using VS Code git GUI or the following commands <pre><code>git add modified-file1 modified-file2\ngit commit -m \"Add my new feature\" # use a concise description\n</code></pre></li> <li>Integrate your new feature to <code>develop</code></li> </ol> Internal Developer <p>You are an internal developer if you have writing permissions to the repository.</p> <p>Most feature branches are never pushed to the repo, only do so if you expect that its development will take days (to avoid losing your work if you computer is damaged). Otherwise follow the following instructions to locally rebase your feature branch into <code>develop</code> and push those rebased changes online.</p> <pre><code>git checkout feature/feature1\ngit pull origin develop\ngit rebase -i develop\ngit checkout develop\ngit merge --no-ff feature/feature1 # (use the default merge message)\ngit push origin develop\ngit branch -d feature/feature1\n</code></pre> External Developer <p>You are an external developer if you do NOT have writing permissions to the repository.</p> <p>Push your feature branch online <pre><code>git push --set-upstream origin feature/external-test\n</code></pre> Then open a pull request to the <code>develop</code> branch using Github\u2019s GUI</p>"},{"location":"developers/git-flow/#release-a-new-version","title":"Release a New Version","text":"<ol> <li>Pull the latest develop  <pre><code>git checkout develop\ngit pull\n</code></pre></li> <li>Create a new release branch <pre><code>git describe --abbrev=0 --tags # Bump the release (0.1.0 to 0.2.0 =&gt; NEW_HOTFIX)\ngit checkout -b release/v[NEW_RELEASE] develop\n</code></pre></li> <li>Add new tag <pre><code>git tag v[NEW_RELEASE]\n</code></pre></li> <li>Merge and push the release branch <pre><code>git checkout develop\ngit merge release/v[NEW_RELEASE]\ngit push --tags origin develop\ngit branch -d release/v[NEW_RELEASE]\n</code></pre></li> <li>Fast-forward master <pre><code>git checkout master\ngit merge --ff-only develop\ngit push\n</code></pre></li> <li>Go to GitHub and create a new release based on the newest tag <code>v[NEW_RELEASE]</code> (remember to add the change log)</li> </ol>"},{"location":"developers/git-flow/#release-a-hotfix","title":"Release a Hotfix","text":"<ol> <li>Pull the latest master <pre><code>git checkout master\ngit pull\n</code></pre></li> <li>Start a hotfix branch <pre><code>git describe --abbrev=0 --tags # Bump the hotfix (0.1.0 to 0.1.1 =&gt; NEW_HOTFIX)\ngit checkout -b hotfix/v[NEW_HOTFIX] master\n</code></pre></li> <li>Fix whatever needs to be fixed</li> <li>Update the change log</li> <li>Tag and merge the hotfix <pre><code>git tag v[NEW_HOTFIX]\ngit checkout develop\ngit merge hotfix/v[NEW_HOTFIX]\ngit push --tags origin develop\ngit branch -d hotfix/v[NEW_HOTFIX]\n</code></pre></li> <li>Fast-forward master <pre><code>git checkout master\ngit merge --ff-only v[NEW_HOTFIX]\ngit push\n</code></pre></li> <li>Go to GitHub and create a new release based on the newest tag <code>v[NEW_HOTFIX]</code> (remember to add the change log)</li> </ol>"},{"location":"developers/remote-support/","title":"Remote Support","text":"<p>We use the Live Share extension of Visual Studio Code to debug bugs when sharing data or database credentials is not possible.</p> <ol> <li>Install Visual Studio Code</li> <li>Open you RAPIDS root folder in a new VSCode window</li> <li>Open a new Terminal <code>Terminal &gt; New terminal</code></li> <li>Install the Live Share extension pack</li> <li> <p>Press Ctrl+P or Cmd+P and run this command:</p> <p><pre><code>&gt;live share: start collaboration session\n</code></pre> 6.  Follow the instructions and share the session link you receive</p> </li> </ol>"},{"location":"developers/test-cases/","title":"Test Cases","text":"<p>Along with the continued development and the addition of new sensors and features to the RAPIDS pipeline, tests for the currently available sensors and features are being implemented. Since this is a Work In Progress this page will be updated with the list of sensors and features for which testing is available. For each of the sensors listed a description of the data used for testing (test cases) are outline. Currently for all intent and testing purposes the <code>tests/data/raw/test01/</code> contains all the test data files for testing android data formats and <code>tests/data/raw/test02/</code> contains all the test data files for testing iOS data formats. It follows that the expected (verified output) are contained in the <code>tests/data/processed/test01/</code> and <code>tests/data/processed/test02/</code> for Android and iOS respectively. <code>tests/data/raw/test03/</code> and <code>tests/data/raw/test04/</code> contain data files for testing empty raw data files for android and iOS respectively.</p> <p>The following is a list of the sensors that testing is currently available.</p>"},{"location":"developers/test-cases/#messages-sms","title":"Messages (SMS)","text":"<ul> <li>The raw message data file contains data for 2 separate days.</li> <li>The data for the first day contains records 5 records for every     <code>epoch</code>.</li> <li>The second day's data contains 6 records for each of only 2     <code>epoch</code> (currently <code>morning</code> and <code>evening</code>)</li> <li>The raw message data contains records for both <code>message_types</code>     (i.e. <code>recieved</code> and <code>sent</code>) in both days in all epochs. The     number records with each <code>message_types</code> per epoch is randomly     distributed There is at least one records with each     <code>message_types</code> per epoch.</li> <li>There is one raw message data file each, as described above, for     testing both iOS and Android data.</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files</li> </ul>"},{"location":"developers/test-cases/#calls","title":"Calls","text":"<p>Due to the difference in the format of the raw call data for iOS and Android the following is the expected results the <code>calls_with_datetime_unified.csv</code>. This would give a better idea of the use cases being tested since the <code>calls_with_datetime_unified.csv</code> would make both the iOS and Android data comparable.</p> <ul> <li>The call data would contain data for 2 days.</li> <li>The data for the first day contains 6 records for every <code>epoch</code>.</li> <li>The second day's data contains 6 records for each of only 2     <code>epoch</code> (currently <code>morning</code> and <code>evening</code>)</li> <li>The call data contains records for all <code>call_types</code> (i.e.     <code>incoming</code>, <code>outgoing</code> and <code>missed</code>) in both days in all epochs.     The number records with each of the <code>call_types</code> per epoch is     randomly distributed. There is at least one records with each     <code>call_types</code> per epoch.</li> <li>There is one call data file each, as described above, for testing     both iOS and Android data.</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files</li> </ul>"},{"location":"developers/test-cases/#screen","title":"Screen","text":"<p>Due to the difference in the format of the raw screen data for iOS and Android the following is the expected results the <code>screen_deltas.csv</code>. This would give a better idea of the use cases being tested since the <code>screen_eltas.csv</code> would make both the iOS and Android data comparable These files are used to calculate the features for the screen sensor</p> <ul> <li>The screen delta data file contains data for 1 day.</li> <li>The screen delta data contains 1 record to represent an <code>unlock</code>     episode that falls within an <code>epoch</code> for every <code>epoch</code>.</li> <li>The screen delta data contains 1 record to represent an <code>unlock</code>     episode that falls across the boundary of 2 epochs. Namely the     <code>unlock</code> episode starts in one epoch and ends in the next, thus     there is a record for <code>unlock</code> episodes that fall across <code>night</code>     to <code>morning</code>, <code>morning</code> to <code>afternoon</code> and finally <code>afternoon</code> to     <code>night</code></li> <li>The testing is done for <code>unlock</code> episode_type.</li> <li>There is one screen data file each for testing both iOS and     Android data formats.</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files</li> </ul>"},{"location":"developers/test-cases/#battery","title":"Battery","text":"<p>Due to the difference in the format of the raw battery data for iOS and Android as well as versions of iOS the following is the expected results the <code>battery_deltas.csv</code>. This would give a better idea of the use cases being tested since the <code>battery_deltas.csv</code> would make both the iOS and Android data comparable. These files are used to calculate the features for the battery sensor.</p> <ul> <li>The battery delta data file contains data for 1 day.</li> <li>The battery delta data contains 1 record each for a <code>charging</code> and     <code>discharging</code> episode that falls within an <code>epoch</code> for every     <code>epoch</code>. Thus, for the <code>daily</code> epoch there would be multiple     <code>charging</code> and <code>discharging</code> episodes</li> <li>Since either a <code>charging</code> episode or a <code>discharging</code> episode and     not both can occur across epochs, in order to test episodes that     occur across epochs alternating episodes of <code>charging</code> and     <code>discharging</code> episodes that fall across <code>night</code> to <code>morning</code>,     <code>morning</code> to <code>afternoon</code> and finally <code>afternoon</code> to <code>night</code> are     present in the battery delta data. This starts with a     <code>discharging</code> episode that begins in <code>night</code> and end in <code>morning</code>.</li> <li>There is one battery data file each, for testing both iOS and     Android data formats.</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files</li> </ul>"},{"location":"developers/test-cases/#bluetooth","title":"Bluetooth","text":"<ul> <li>The raw Bluetooth data file contains data for 1 day.</li> <li>The raw Bluetooth data contains at least 2 records for each     <code>epoch</code>. Each <code>epoch</code> has a record with a <code>timestamp</code> for the     beginning boundary for that <code>epoch</code> and a record with a     <code>timestamp</code> for the ending boundary for that <code>epoch</code>. (e.g. For     the <code>morning</code> epoch there is a record with a <code>timestamp</code> for     <code>6:00AM</code> and another record with a <code>timestamp</code> for <code>11:59:59AM</code>.     These are to test edge cases)</li> <li>An option of 5 Bluetooth devices are randomly distributed     throughout the data records.</li> <li>There is one raw Bluetooth data file each, for testing both iOS     and Android data formats.</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files.</li> </ul>"},{"location":"developers/test-cases/#wifi","title":"WIFI","text":"<ul> <li>There are 2 data files (<code>wifi_raw.csv</code> and <code>sensor_wifi_raw.csv</code>)     for each fake participant for each phone platform. </li> <li>The raw WIFI data files contain data for 1 day.</li> <li>The <code>sensor_wifi_raw.csv</code> data contains at least 2 records for     each <code>epoch</code>. Each <code>epoch</code> has a record with a <code>timestamp</code> for the     beginning boundary for that <code>epoch</code> and a record with a     <code>timestamp</code> for the ending boundary for that <code>epoch</code>. (e.g. For     the <code>morning</code> epoch there is a record with a <code>timestamp</code> for     <code>6:00AM</code> and another record with a <code>timestamp</code> for <code>11:59:59AM</code>.     These are to test edge cases)</li> <li>The <code>wifi_raw.csv</code> data contains 3 records with random timestamps     for each <code>epoch</code> to represent visible broadcasting WIFI network.     This file is empty for the iOS phone testing data.</li> <li>An option of 10 access point devices is randomly distributed     throughout the data records. 5 each for <code>sensor_wifi_raw.csv</code> and     <code>wifi_raw.csv</code>.</li> <li>There data files for testing both iOS and Android data formats.</li> <li>There are also additional empty data files for both android and     iOS for testing empty data files.</li> </ul>"},{"location":"developers/test-cases/#light","title":"Light","text":"<ul> <li>The raw light data file contains data for 1 day.</li> <li>The raw light data contains 3 or 4 rows of data for each <code>epoch</code>     except <code>night</code>. The single row of data for <code>night</code> is for testing     features for single values inputs. (Example testing the standard     deviation of one input value)</li> <li>Since light is only available for Android there is only one file     that contains data for Android. All other files (i.e. for iPhone)     are empty data files.</li> </ul>"},{"location":"developers/test-cases/#application-foreground","title":"Application Foreground","text":"<ul> <li>The raw application foreground data file contains data for 1 day.</li> <li>The raw application foreground data contains 7 - 9 rows of data     for each <code>epoch</code>. The records for each <code>epoch</code> contains apps that     are randomly selected from a list of apps that are from the     <code>MULTIPLE_CATEGORIES</code> and <code>SINGLE_CATEGORIES</code> (See     testing_config.yaml). There are also records in each epoch     that have apps randomly selected from a list of apps that are from     the <code>EXCLUDED_CATEGORIES</code> and <code>EXCLUDED_APPS</code>. This is to test     that these apps are actually being excluded from the calculations     of features. There are also records to test <code>SINGLE_APPS</code>     calculations.</li> <li>Since application foreground is only available for Android there     is only one file that contains data for Android. All other files     (i.e. for iPhone) are empty data files.</li> </ul>"},{"location":"developers/test-cases/#activity-recognition","title":"Activity Recognition","text":"<ul> <li>The raw Activity Recognition data file contains data for 1 day.</li> <li>The raw Activity Recognition data each <code>epoch</code> period contains     rows that records 2 - 5 different <code>activity_types</code>. The is such     that durations of activities can be tested. Additionally, there     are records that mimic the duration of an activity over the time     boundary of neighboring epochs. (For example, there a set of     records that mimic the participant <code>in_vehicle</code> from <code>afternoon</code>     into <code>evening</code>)</li> <li>There is one file each with raw Activity Recognition data for     testing both iOS and Android data formats.     (plugin_google_activity_recognition_raw.csv for android and     plugin_ios_activity_recognition_raw.csv for iOS)</li> <li>There is also an additional empty data file for both android and     iOS for testing empty data files.</li> </ul>"},{"location":"developers/test-cases/#conversation","title":"Conversation","text":"<ul> <li>The raw conversation data file contains data for 2 day.</li> <li>The raw conversation data contains records with a sample of both     <code>datatypes</code> (i.e. <code>voice/noise</code> = <code>0</code>, and <code>conversation</code> = <code>2</code> )     as well as rows with for samples of each of the <code>inference</code> values     (i.e. <code>silence</code> = <code>0</code>, <code>noise</code> = <code>1</code>, <code>voice</code> = <code>2</code>, and <code>unknown</code>     = <code>3</code>) for each <code>epoch</code>. The different <code>datatype</code> and <code>inference</code>     records are randomly distributed throughout the <code>epoch</code>.</li> <li>Additionally there are 2 - 5 records for conversations (<code>datatype</code>     = 2, and <code>inference</code> = -1) in each <code>epoch</code> and for each <code>epoch</code>     except night, there is a conversation record that has a     <code>double_convo_start</code> <code>timestamp</code> that is from the previous     <code>epoch</code>. This is to test the calculations of features across     <code>epochs</code>.</li> <li>There is a raw conversation data file for both android and iOS     platforms (<code>plugin_studentlife_audio_android_raw.csv</code> and     <code>plugin_studentlife_audio_raw.csv</code> respectively).</li> <li>Finally, there are also additional empty data files for both     android and iOS for testing empty data files</li> </ul>"},{"location":"developers/testing/","title":"Testing","text":"<p>The following is a simple guide to testing RAPIDS. All files necessary for testing are stored in the <code>/tests</code> directory</p>"},{"location":"developers/testing/#steps-for-testing","title":"Steps for Testing","text":"<ol> <li>To begin testing RAPIDS place the fake raw input data <code>csv</code> files in     <code>tests/data/raw/</code>. The fake participant files should be placed in     <code>tests/data/external/</code>. The expected output files of RAPIDS after     processing the input data should be placed in     <code>tests/data/processesd/</code>.</li> <li>The Snakemake rule(s) that are to be tested must be placed in the     <code>tests/Snakemake</code> file. The current <code>tests/Snakemake</code> is a good     example of how to define them. (At the time of writing this     documentation the snakefile contains rules messages (SMS), calls and     screen)</li> <li>Edit the <code>tests/settings/config.yaml</code>. Add and/or remove the rules     to be run for testing from the <code>forcerun</code> list.</li> <li>Edit the <code>tests/settings/testing_config.yaml</code> with the necessary     configuration settings for running the rules to be tested.</li> <li>Add any additional testscripts in <code>tests/scripts</code>.</li> <li>Uncomment or comment off lines in the testing shell script     <code>tests/scripts/run_tests.sh</code>.</li> <li> <p>Run the testing shell script.</p> <pre><code>tests/scripts/run_tests.sh\n</code></pre> </li> </ol> <p>The following is a snippet of the output you should see after running your test.</p> <pre><code>test_sensors_files_exist (test_sensor_features.TestSensorFeatures) ... ok\ntest_sensors_features_calculations (test_sensor_features.TestSensorFeatures) ... FAIL\n\n======================================================================\nFAIL: test_sensors_features_calculations (test_sensor_features.TestSensorFeatures)\n----------------------------------------------------------------------\n</code></pre> <p>The results above show that the first test <code>test_sensors_files_exist</code> passed while <code>test_sensors_features_calculations</code> failed. In addition you should get the traceback of the failure (not shown here). For more information on how to implement test scripts and use unittest please see Unittest Documentation</p> <p>Testing of the RAPIDS sensors and features is a work-in-progress. Please see <code>test-cases</code> for a list of sensors and features that have testing currently available.</p> <p>Currently the repository is set up to test a number of sensors out of the box by simply running the <code>tests/scripts/run_tests.sh</code> command once the RAPIDS python environment is active.</p>"},{"location":"developers/virtual-environments/","title":"Virtual Environments","text":""},{"location":"developers/virtual-environments/#python-virtual-environment","title":"Python Virtual Environment","text":""},{"location":"developers/virtual-environments/#add-new-packages","title":"Add new packages","text":"<p>Try to install any new package using <code>conda install -c CHANNEL PACKAGE_NAME</code> (you can use <code>pip</code> if the package is only available there). Make sure your Python virtual environment is active (<code>conda activate YOUR_ENV</code>).</p>"},{"location":"developers/virtual-environments/#remove-packages","title":"Remove packages","text":"<p>Uninstall packages using the same manager you used to install them <code>conda remove PACKAGE_NAME</code> or <code>pip uninstall PACKAGE_NAME</code></p>"},{"location":"developers/virtual-environments/#update-your-conda-environmentyaml","title":"Update your conda <code>environment.yaml</code>","text":"<p>After installing or removing a package you can use the following command in your terminal to update your <code>environment.yaml</code> before publishing your pipeline. Note that we ignore the package version for <code>libfortran</code> to keep compatibility with Linux: <pre><code>conda env export --no-builds | sed 's/^.*libgfortran.*$/  - libgfortran/' &gt;  environment.yml\n</code></pre></p>"},{"location":"developers/virtual-environments/#r-virtual-environment","title":"R Virtual Environment","text":""},{"location":"developers/virtual-environments/#add-new-packages_1","title":"Add new packages","text":"<ol> <li>Open your terminal and navigate to RAPIDS\u2019 root folder</li> <li>Run <code>R</code> to open an R interactive session</li> <li>Run <code>renv::install(\"PACKAGE_NAME\")</code></li> </ol>"},{"location":"developers/virtual-environments/#remove-packages_1","title":"Remove packages","text":"<ol> <li>Open your terminal and navigate to RAPIDS\u2019 root folder</li> <li>Run <code>R</code> to open an R interactive session</li> <li>Run <code>renv::remove(\"PACKAGE_NAME\")</code></li> </ol>"},{"location":"developers/virtual-environments/#update-your-r-renvlock","title":"Update your R <code>renv.lock</code>","text":"<p>After installing or removing a package you can use the following command in your terminal to update your <code>renv.lock</code> before publishing your pipeline.</p> <ol> <li>Open your terminal and navigate to RAPIDS\u2019 root folder</li> <li>Run <code>R</code> to open an R interactive session</li> <li>Run <code>renv::snapshot()</code> (renv will ask you to confirm any updates to this file)</li> </ol>"},{"location":"features/add-new-features/","title":"Add New Features","text":"<p>Hint</p> <p>We recommend reading the Behavioral Features Introduction before reading this page</p> <p>Hint</p> <p>You won\u2019t have to deal with time zones, dates, times, data cleaning or preprocessing. The data that RAPIDS pipes to your feature extraction code is ready to process.</p>"},{"location":"features/add-new-features/#new-features-for-existing-sensors","title":"New Features for Existing Sensors","text":"<p>You can add new features to any existing sensors (see list below) by adding a new provider in three steps:</p> <ol> <li>Modify the <code>config.yaml</code> file </li> <li>Create a provider folder, script and function</li> <li>Implement your features extraction code</li> </ol> <p>As a tutorial, we will add a new provider for <code>PHONE_ACCELEROMETER</code> called <code>VEGA</code> that extracts <code>feature1</code>, <code>feature2</code>, <code>feature3</code> in Python and that it requires a parameter from the user called <code>MY_PARAMETER</code>.</p> Existing Sensors <p>An existing sensor is any of the phone or Fitbit sensors with a configuration entry in <code>config.yaml</code>:</p> <ul> <li>Phone Accelerometer</li> <li>Phone Activity Recognition</li> <li>Phone Applications Foreground</li> <li>Phone Battery</li> <li>Phone Bluetooth</li> <li>Phone Calls</li> <li>Phone Conversation</li> <li>Phone Data Yield</li> <li>Phone Light</li> <li>Phone Locations</li> <li>Phone Messages</li> <li>Phone Screen</li> <li>Phone WiFI Connected</li> <li>Phone WiFI Visible</li> <li>Fitbit Heart Rate Summary</li> <li>Fitbit Heart Rate Intraday</li> <li>Fitbit Sleep Summary</li> <li>Fitbit Steps Summary</li> <li>Fitbit Steps Intraday</li> </ul>"},{"location":"features/add-new-features/#modify-the-configyaml-file","title":"Modify the <code>config.yaml</code> file","text":"<p>In this step you need to add your provider configuration section under the relevant sensor in <code>config.yaml</code>. See our example for our tutorial\u2019s <code>VEGA</code> provider for  <code>PHONE_ACCELEROMETER</code>:</p> Example configuration for a new accelerometer provider <code>VEGA</code> <pre><code>PHONE_ACCELEROMETER:\n    TABLE: accelerometer\n    PROVIDERS:\n        RAPIDS:\n            COMPUTE: False\n            ...\n\n        PANDA:\n            COMPUTE: False\n            ...\n        VEGA:\n            COMPUTE: False\n            FEATURES: [\"feature1\", \"feature2\", \"feature3\"]\n            MY_PARAMTER: a_string\n            SRC_FOLDER: \"vega\"\n            SRC_LANGUAGE: \"python\"\n</code></pre> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Flag to activate/deactivate your provider <code>[FEATURES]</code> List of features your provider supports. Your provider code should only return the features on this list <code>[MY_PARAMTER]</code> An arbitrary parameter that our example provider <code>VEGA</code> needs. This can be a boolean, integer, float, string or an array of any of such types. <code>[SRC_LANGUAGE]</code> The programming language of your provider script, it can be <code>python</code> or <code>r</code>, in our example <code>python</code> <code>[SRC_FOLDER]</code> The name of your provider in lower case, in our example <code>vega</code> (this will be the name of your folder in the next step)"},{"location":"features/add-new-features/#create-a-provider-folder-script-and-function","title":"Create a provider folder, script and function","text":"<p>In this step you need to add a folder, script and function for your provider.</p> <ol> <li>Create your provider folder under <code>src/feature/DEVICE_SENSOR/YOUR_PROVIDER</code>, in our example <code>src/feature/phone_accelerometer/vega</code> (same as <code>[SRC_FOLDER]</code> in the step above).</li> <li>Create your provider script inside your provider folder, it can be a Python file called <code>main.py</code> or an R file called <code>main.R</code>.</li> <li> <p>Add your provider function in your provider script. The name of such function should be <code>[providername]_features</code>, in our example <code>vega_features</code></p> <p>Python function</p> <pre><code>def [providername]_features(sensor_data_files, time_segment, provider, filter_data_by_segment, *args, **kwargs):\n</code></pre> <p>R function</p> <pre><code>[providername]_features &lt;- function(sensor_data, time_segment, provider)\n</code></pre> </li> </ol>"},{"location":"features/add-new-features/#implement-your-feature-extraction-code","title":"Implement your feature extraction code","text":"<p>The provider function that you created in the step above will receive the following parameters:</p> Parameter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>sensor_data_files</code> Path to the CSV file containing the data of a single participant. This data has been cleaned and preprocessed. Your function will be automatically called for each participant in your study (in the <code>[PIDS]</code> array in <code>config.yaml</code>) <code>time_segment</code> The label of the time segment that should be processed. <code>provider</code> The parameters you configured for your provider in <code>config.yaml</code> will be available in this variable as a dictionary in Python or a list in R. In our example this dictionary contains <code>{MY_PARAMETER:\"a_string\"}</code> <code>filter_data_by_segment</code> Python only. A function that you will use to filter your data. In R this function is already available in the environment. <code>*args</code> Python only. Not used for now <code>**kwargs</code> Python only. Not used for now <p>The code to extract your behavioral features should be implemented in your provider function and in general terms it will have three stages:</p> 1. Read a participant\u2019s data by loading the CSV data stored in the file pointed by <code>sensor_data_files</code> <pre><code>acc_data = pd.read_csv(sensor_data_files[\"sensor_data\"])\n</code></pre> <p>Note that phone\u2019s battery, screen, and activity recognition data is given as episodes instead of event rows (for example, start and end timestamps of the periods the phone screen was on)</p> 2. Filter your data to process only those rows that belong to <code>time_segment</code> <p>This step is only one line of code, but to undersand why we need it, keep reading. <pre><code>acc_data = filter_data_by_segment(acc_data, time_segment)\n</code></pre></p> <p>You should use the <code>filter_data_by_segment()</code> function to process and group those rows that belong to each of the time segments RAPIDS could be configured with.</p> <p>Let\u2019s understand the <code>filter_data_by_segment()</code> function with an example. A RAPIDS user can extract features on any arbitrary time segment. A time segment is a period of time that has a label and one or more instances. For example, the user (or you) could have requested features on a daily, weekly, and week-end basis for <code>p01</code>. The labels are arbritrary and the instances depend on the days a participant was monitored for: </p> <ul> <li>the daily segment could be named <code>my_days</code> and if <code>p01</code> was monitored for 14 days, it would have 14 instances</li> <li>the weekly segment could be named <code>my_weeks</code> and if <code>p01</code> was monitored for 14 days, it would have 2 instances.</li> <li>the weekend segment could be named <code>my_weekends</code> and if <code>p01</code> was monitored for 14 days, it would have 2 instances.</li> </ul> <p>For this example, RAPIDS will call your provider function three times for <code>p01</code>, once where <code>time_segment</code> is <code>my_days</code>, once where <code>time_segment</code> is <code>my_weeks</code> and once where <code>time_segment</code> is <code>my_weekends</code>. In this example not every row in <code>p01</code>\u2019s data needs to take part in the feature computation for either segment and the rows need to be grouped differently. </p> <p>Thus <code>filter_data_by_segment()</code> comes in handy, it will return a data frame that contains the rows that were logged during a time segment plus an extra column called <code>local_segment</code>. This new column will have as many unique values as time segment instances exist (14, 2, and 2 for our <code>p01</code>\u2019s <code>my_days</code>, <code>my_weeks</code>, and <code>my_weekends</code> examples). After filtering, you should group the data frame by this column and compute any desired features, for example:</p> <pre><code>acc_features[\"maxmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].max()\n</code></pre> <p>The reason RAPIDS does not filter the participant\u2019s data set for you is because your code might need to compute something based on a participant\u2019s complete dataset before computing their features. For example, you might want to identify the number that called a participant the most throughout the study before computing a feature with the number of calls the participant received from this number.</p> 3. Return a data frame with your features <p>After filtering, grouping your data, and computing your features, your provider function should return a data frame that has:</p> <ul> <li>One row per time segment instance (e.g. 14 our <code>p01</code>\u2019s <code>my_days</code> example)</li> <li>The <code>local_segment</code> column added by <code>filter_data_by_segment()</code></li> <li>One column per feature. By convention the name of your features should only contain letters or numbers (<code>feature1</code>). RAPIDS will automatically add the right sensor and provider prefix (<code>phone_accelerometr_vega_</code>)</li> </ul> <code>PHONE_ACCELEROMETER</code> Provider Example <p>For your reference, this a short example of our own provider (<code>RAPIDS</code>) for <code>PHONE_ACCELEROMETER</code> that computes five acceleration features</p> <pre><code>def rapids_features(sensor_data_files, time_segment, provider, filter_data_by_segment, *args, **kwargs):\n\n    acc_data = pd.read_csv(sensor_data_files[\"sensor_data\"])\n    requested_features = provider[\"FEATURES\"]\n    # name of the features this function can compute\n    base_features_names = [\"maxmagnitude\", \"minmagnitude\", \"avgmagnitude\", \"medianmagnitude\", \"stdmagnitude\"]\n    # the subset of requested features this function can compute\n    features_to_compute = list(set(requested_features) &amp; set(base_features_names))\n\n    acc_features = pd.DataFrame(columns=[\"local_segment\"] + features_to_compute)\n    if not acc_data.empty:\n        acc_data = filter_data_by_segment(acc_data, time_segment)\n\n        if not acc_data.empty:\n            acc_features = pd.DataFrame()\n            # get magnitude related features: magnitude = sqrt(x^2+y^2+z^2)\n            magnitude = acc_data.apply(lambda row: np.sqrt(row[\"double_values_0\"] ** 2 + row[\"double_values_1\"] ** 2 + row[\"double_values_2\"] ** 2), axis=1)\n            acc_data = acc_data.assign(magnitude = magnitude.values)\n\n            if \"maxmagnitude\" in features_to_compute:\n                acc_features[\"maxmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].max()\n            if \"minmagnitude\" in features_to_compute:\n                acc_features[\"minmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].min()\n            if \"avgmagnitude\" in features_to_compute:\n                acc_features[\"avgmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].mean()\n            if \"medianmagnitude\" in features_to_compute:\n                acc_features[\"medianmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].median()\n            if \"stdmagnitude\" in features_to_compute:\n                acc_features[\"stdmagnitude\"] = acc_data.groupby([\"local_segment\"])[\"magnitude\"].std()\n\n            acc_features = acc_features.reset_index()\n\n    return acc_features\n</code></pre>"},{"location":"features/add-new-features/#new-features-for-non-existing-sensors","title":"New Features for Non-Existing Sensors","text":"<p>If you want to add features for a device or a sensor that we do not support at the moment (those that do not appear in the <code>\"Existing Sensors\"</code> list above), contact us or request it on Slack and we can add the necessary code so you can follow the instructions above.</p>"},{"location":"features/feature-introduction/","title":"Behavioral Features Introduction","text":"<p>Every phone or Fitbit sensor has a corresponding config section in <code>config.yaml</code>, these sections follow a similar structure and we\u2019ll use <code>PHONE_ACCELEROMETER</code> as an example to explain this structure.</p> <p>Hint</p> <ul> <li>We recommend reading this page if you are using RAPIDS for the first time</li> <li>All computed sensor features are stored under <code>/data/processed/features</code> on files per sensor, per participant and per study (all participants).</li> <li>Every time you change any sensor parameters, provider parameters or provider features, all the necessary files will be updated as soon as you execute RAPIDS.</li> </ul> <p>Config section example for <code>PHONE_ACCELEROMETER</code></p> <pre><code># 1) Config section\nPHONE_ACCELEROMETER:\n    # 2) Parameters for PHONE_ACCELEROMETER\n    TABLE: accelerometer\n\n    # 3) Providers for PHONE_ACCELEROMETER\n    PROVIDERS:\n        # 4) RAPIDS provider\n        RAPIDS:\n            # 4.1) Parameters of RAPIDS provider of PHONE_ACCELEROMETER\n            COMPUTE: False\n            # 4.2) Features of RAPIDS provider of PHONE_ACCELEROMETER\n            FEATURES: [\"maxmagnitude\", \"minmagnitude\", \"avgmagnitude\", \"medianmagnitude\", \"stdmagnitude\"]\n            SRC_FOLDER: \"rapids\" # inside src/features/phone_accelerometer\n            SRC_LANGUAGE: \"python\"\n\n        # 5) PANDA provider\n        PANDA:\n            # 5.1) Parameters of PANDA provider of PHONE_ACCELEROMETER\n            COMPUTE: False\n            VALID_SENSED_MINUTES: False\n            # 5.2) Features of PANDA provider of PHONE_ACCELEROMETER\n            FEATURES:\n                exertional_activity_episode: [\"sumduration\", \"maxduration\", \"minduration\", \"avgduration\", \"medianduration\", \"stdduration\"]\n                nonexertional_activity_episode: [\"sumduration\", \"maxduration\", \"minduration\", \"avgduration\", \"medianduration\", \"stdduration\"]\n            SRC_FOLDER: \"panda\" # inside src/features/phone_accelerometer\n            SRC_LANGUAGE: \"python\"\n</code></pre>"},{"location":"features/feature-introduction/#sensor-parameters","title":"Sensor Parameters","text":"<p>Each sensor configuration section has a \u201cparameters\u201d subsection (see <code>#2</code> in the example). These are parameters that affect different aspects of how the raw data is downloaded, and processed. The <code>TABLE</code> parameter exists for every sensor, but some sensors will have extra parameters like <code>[PHONE_LOCATIONS]</code>. We explain these parameters in a table at the top of each sensor documentation page.</p>"},{"location":"features/feature-introduction/#sensor-providers","title":"Sensor Providers","text":"<p>Each sensor configuration section can have zero, one or more behavioral feature providers (see <code>#3</code> in the example). A provider is a script created by the core RAPIDS team or other researchers that extracts behavioral features for that sensor. In this example, accelerometer has two providers: RAPIDS (see <code>#4</code>) and PANDA (see <code>#5</code>).</p>"},{"location":"features/feature-introduction/#provider-parameters","title":"Provider Parameters","text":"<p>Each provider has parameters that affect the computation of the behavioral features it offers (see <code>#4.1</code> or <code>#5.1</code> in the example). These parameters will include at least a <code>[COMPUTE]</code> flag that you switch to <code>True</code> to extract a provider\u2019s behavioral features. </p> <p>We explain every provider\u2019s parameter in a table under the <code>Parameters description</code> heading on each provider documentation page.</p>"},{"location":"features/feature-introduction/#provider-features","title":"Provider Features","text":"<p>Each provider offers a set of behavioral features (see <code>#4.2</code> or <code>#5.2</code> in the example). For some providers these features are grouped in an array (like those for <code>RAPIDS</code> provider in <code>#4.2</code>) but for others they are grouped in a collection of arrays depending on the meaning and purpose of those features (like those for <code>PANDAS</code> provider in <code>#5.2</code>). In either case, you can delete the features you are not interested in and they will not be included in the sensor\u2019s output feature file. </p> <p>We explain each behavioral feature in a table under the <code>Features description</code> heading on each provider documentation page.</p>"},{"location":"features/fitbit-heartrate-intraday/","title":"Fitbit Heart Rate Intraday","text":"<p>Sensor parameters description for <code>[FITBIT_HEARTRATE_INTRADAY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table name or file path where the heart rate intraday data is stored. The configuration keys in Device Data Source Configuration control whether this parameter is interpreted as table or file. <p>The format of the column(s) containing the Fitbit sensor data can be <code>JSON</code> or <code>PLAIN_TEXT</code>. The data in <code>JSON</code> format is obtained directly from the Fitbit API. We support <code>PLAIN_TEXT</code> in case you already parsed your data and don\u2019t have access to your participants\u2019 Fitbit accounts anymore. If your data is in <code>JSON</code> format then summary and intraday data come packed together. </p> <p>We provide examples of the input format that RAPIDS expects, note that both examples for <code>JSON</code> and <code>PLAIN_TEXT</code> are tabular and the actual format difference comes in the <code>fitbit_data</code> column (we truncate the <code>JSON</code> example for brevity).</p> Example of the structure of source data JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-07\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:1200.6102,\u201dmax\u201d:88,\u201dmin\u201d:31,\u201dminutes\u201d:1058,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:760.3020,\u201dmax\u201d:120,\u201dmin\u201d:86,\u201dminutes\u201d:366,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:15.2048,\u201dmax\u201d:146,\u201dmin\u201d:120,\u201dminutes\u201d:2,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:221,\u201dmin\u201d:148,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:72}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:68},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:67},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:67},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-08\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:1100.1120,\u201dmax\u201d:89,\u201dmin\u201d:30,\u201dminutes\u201d:921,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:660.0012,\u201dmax\u201d:118,\u201dmin\u201d:82,\u201dminutes\u201d:361,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:23.7088,\u201dmax\u201d:142,\u201dmin\u201d:108,\u201dminutes\u201d:3,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:221,\u201dmin\u201d:148,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:70}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:77},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:75},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:73},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-09\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:750.3615,\u201dmax\u201d:77,\u201dmin\u201d:30,\u201dminutes\u201d:851,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:734.1516,\u201dmax\u201d:107,\u201dmin\u201d:77,\u201dminutes\u201d:550,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:131.8579,\u201dmax\u201d:130,\u201dmin\u201d:107,\u201dminutes\u201d:29,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:220,\u201dmin\u201d:130,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:69}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:90},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:89},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:88},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} PLAIN_TEXT device_id local_date_time heartrate heartrate_zone a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:00:00 68 outofrange a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:01:00 67 outofrange a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:02:00 67 outofrange"},{"location":"features/fitbit-heartrate-intraday/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments</p> <ul> <li>Available for all time segments</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/fitbit_heartrate_intraday_raw.csv\n- data/raw/{pid}/fitbit_heartrate_intraday_parsed.csv\n- data/raw/{pid}/fitbit_heartrate_intraday_parsed_with_datetime.csv\n- data/interim/{pid}/fitbit_heartrate_intraday_features/fitbit_heartrate_intraday_{language}_{provider_key}.csv\n- data/processed/features/{pid}/fitbit_heartrate_intraday.csv\n</code></pre> <p>Parameters description for <code>[FITBIT_HEARTRATE_INTRADAY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>FITBIT_HEARTRATE_INTRADAY</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed from heart rate intraday data, see table below <p>Features description for <code>[FITBIT_HEARTRATE_INTRADAY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description maxhr beats/mins The maximum heart rate during a time segment. minhr beats/mins The minimum heart rate during a time segment. avghr beats/mins The average heart rate during a time segment. medianhr beats/mins The median of heart rate during a time segment. modehr beats/mins The mode of heart rate during a time segment. stdhr beats/mins The standard deviation of heart rate during a time segment. diffmaxmodehr beats/mins The difference between the maximum and mode heart rate during a time segment. diffminmodehr beats/mins The difference between the mode and minimum heart rate during a time segment. entropyhr nats Shannon\u2019s entropy measurement based on heart rate during a time segment. minutesonZONE minutes Number of minutes the user\u2019s heart rate fell within each <code>heartrate_zone</code> during a time segment. <p>Assumptions/Observations</p> <ol> <li>There are four heart rate zones (ZONE): <code>outofrange</code>, <code>fatburn</code>, <code>cardio</code>, and <code>peak</code>. Please refer to Fitbit documentation for more information about the way they are computed.</li> </ol>"},{"location":"features/fitbit-heartrate-summary/","title":"Fitbit Heart Rate Summary","text":"<p>Sensor parameters description for <code>[FITBIT_HEARTRATE_SUMMARY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table name or file path where the heart rate summary data is stored. The configuration keys in Device Data Source Configuration control whether this parameter is interpreted as table or file. <p>The format of the column(s) containing the Fitbit sensor data can be <code>JSON</code> or <code>PLAIN_TEXT</code>. The data in <code>JSON</code> format is obtained directly from the Fitbit API. We support <code>PLAIN_TEXT</code> in case you already parsed your data and don\u2019t have access to your participants\u2019 Fitbit accounts anymore. If your data is in <code>JSON</code> format then summary and intraday data come packed together. </p> <p>We provide examples of the input format that RAPIDS expects, note that both examples for <code>JSON</code> and <code>PLAIN_TEXT</code> are tabular and the actual format difference comes in the <code>fitbit_data</code> column (we truncate the <code>JSON</code> example for brevity).</p> Example of the structure of source data JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-07\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:1200.6102,\u201dmax\u201d:88,\u201dmin\u201d:31,\u201dminutes\u201d:1058,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:760.3020,\u201dmax\u201d:120,\u201dmin\u201d:86,\u201dminutes\u201d:366,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:15.2048,\u201dmax\u201d:146,\u201dmin\u201d:120,\u201dminutes\u201d:2,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:221,\u201dmin\u201d:148,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:72}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:68},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:67},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:67},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-08\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:1100.1120,\u201dmax\u201d:89,\u201dmin\u201d:30,\u201dminutes\u201d:921,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:660.0012,\u201dmax\u201d:118,\u201dmin\u201d:82,\u201dminutes\u201d:361,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:23.7088,\u201dmax\u201d:142,\u201dmin\u201d:108,\u201dminutes\u201d:3,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:221,\u201dmin\u201d:148,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:70}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:77},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:75},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:73},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201cactivities-heart\u201d:[{\u201cdateTime\u201d:\u201d2020-10-09\u201d,\u201dvalue\u201d:{\u201ccustomHeartRateZones\u201d:[],\u201dheartRateZones\u201d:[{\u201ccaloriesOut\u201d:750.3615,\u201dmax\u201d:77,\u201dmin\u201d:30,\u201dminutes\u201d:851,\u201dname\u201d:\u201dOut of Range\u201d},{\u201ccaloriesOut\u201d:734.1516,\u201dmax\u201d:107,\u201dmin\u201d:77,\u201dminutes\u201d:550,\u201dname\u201d:\u201dFat Burn\u201d},{\u201ccaloriesOut\u201d:131.8579,\u201dmax\u201d:130,\u201dmin\u201d:107,\u201dminutes\u201d:29,\u201dname\u201d:\u201dCardio\u201d},{\u201ccaloriesOut\u201d:0,\u201dmax\u201d:220,\u201dmin\u201d:130,\u201dminutes\u201d:0,\u201dname\u201d:\u201dPeak\u201d}],\u201drestingHeartRate\u201d:69}}],\u201dactivities-heart-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:90},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:89},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:88},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} PLAIN_TEXT device_id local_date_time heartrate_daily_restinghr heartrate_daily_caloriesoutofrange heartrate_daily_caloriesfatburn heartrate_daily_caloriescardio heartrate_daily_caloriespeak a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 72 1200.6102 760.3020 15.2048 0 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-08 70 1100.1120 660.0012 23.7088 0 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-09 69 750.3615 734.1516 131.8579 0"},{"location":"features/fitbit-heartrate-summary/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments</p> <ul> <li>Only available for segments that span 1 or more complete days (e.g. Jan 1<sup>st</sup> 00:00 to Jan 3<sup>rd</sup> 23:59)</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/fitbit_heartrate_summary_raw.csv\n- data/raw/{pid}/fitbit_heartrate_summary_parsed.csv\n- data/raw/{pid}/fitbit_heartrate_summary_parsed_with_datetime.csv\n- data/interim/{pid}/fitbit_heartrate_summary_features/fitbit_heartrate_summary_{language}_{provider_key}.csv\n- data/processed/features/{pid}/fitbit_heartrate_summary.csv\n</code></pre> <p>Parameters description for <code>[FITBIT_HEARTRATE_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>FITBIT_HEARTRATE_SUMMARY</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed from heart rate summary data, see table below <p>Features description for <code>[FITBIT_HEARTRATE_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description maxrestinghr beats/mins The maximum daily resting heart rate during a time segment. minrestinghr beats/mins The minimum daily resting heart rate during a time segment. avgrestinghr beats/mins The average daily resting heart rate during a time segment. medianrestinghr beats/mins The median of daily resting heart rate during a time segment. moderestinghr beats/mins The mode of daily resting heart rate during a time segment. stdrestinghr beats/mins The standard deviation of daily resting heart rate during a time segment. diffmaxmoderestinghr beats/mins The difference between the maximum and mode daily resting heart rate during a time segment. diffminmoderestinghr beats/mins The difference between the mode and minimum daily resting heart rate during a time segment. entropyrestinghr nats Shannon\u2019s entropy measurement based on daily resting heart rate during a time segment. sumcaloriesZONE cals The total daily calories burned within <code>heartrate_zone</code> during a time segment. maxcaloriesZONE cals The maximum daily calories burned within <code>heartrate_zone</code> during a time segment. mincaloriesZONE cals The minimum daily calories burned within <code>heartrate_zone</code> during a time segment. avgcaloriesZONE cals The average daily calories burned within <code>heartrate_zone</code> during a time segment. mediancaloriesZONE cals The median of daily calories burned within <code>heartrate_zone</code> during a time segment. stdcaloriesZONE cals The standard deviation of daily calories burned within <code>heartrate_zone</code> during a time segment. entropycaloriesZONE nats Shannon\u2019s entropy measurement based on daily calories burned within <code>heartrate_zone</code> during a time segment. <p>Assumptions/Observations</p> <ol> <li> <p>There are four heart rate zones (ZONE): <code>outofrange</code>, <code>fatburn</code>, <code>cardio</code>, and <code>peak</code>. Please refer to Fitbit documentation for more information about the way they are computed.</p> </li> <li> <p>Calories\u2019 accuracy depends on the users\u2019 Fitbit profile (weight, height, etc.).</p> </li> </ol>"},{"location":"features/fitbit-sleep-summary/","title":"Fitbit Sleep Summary","text":"<p>Sensor parameters description for <code>[FITBIT_SLEEP_SUMMARY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table name or file path where the sleep summary data is stored. The configuration keys in Device Data Source Configuration control whether this parameter is interpreted as table or file. <p>The format of the column(s) containing the Fitbit sensor data can be <code>JSON</code> or <code>PLAIN_TEXT</code>. The data in <code>JSON</code> format is obtained directly from the Fitbit API. We support <code>PLAIN_TEXT</code> in case you already parsed your data and don\u2019t have access to your participants\u2019 Fitbit accounts anymore. If your data is in <code>JSON</code> format then summary and intraday data come packed together. </p> <p>We provide examples of the input format that RAPIDS expects, note that both examples for <code>JSON</code> and <code>PLAIN_TEXT</code> are tabular and the actual format difference comes in the <code>fitbit_data</code> column (we truncate the <code>JSON</code> example for brevity).</p> Example of the structure of source data with Fitbit\u2019s sleep API Version 1 JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d: [{\u201cawakeCount\u201d: 2, \u201cawakeDuration\u201d: 3, \u201cawakeningsCount\u201d: 10, \u201cdateOfSleep\u201d: \u201c2020-10-07\u201d, \u201cduration\u201d: 8100000, \u201cefficiency\u201d: 91, \u201cendTime\u201d: \u201c2020-10-07T18:10:00.000\u201d, \u201cisMainSleep\u201d: true, \u201clogId\u201d: 14147921940, \u201cminuteData\u201d: [{\u201cdateTime\u201d: \u201c15:55:00\u201d, \u201cvalue\u201d: \u201c3\u201d}, {\u201cdateTime\u201d: \u201c15:56:00\u201d, \u201cvalue\u201d: \u201c3\u201d}, {\u201cdateTime\u201d: \u201c15:57:00\u201d, \u201cvalue\u201d: \u201c2\u201d},\u2026], \u201cminutesAfterWakeup\u201d: 0, \u201cminutesAsleep\u201d: 123, \u201cminutesAwake\u201d: 12, \u201cminutesToFallAsleep\u201d: 0, \u201crestlessCount\u201d: 8, \u201crestlessDuration\u201d: 9, \u201cstartTime\u201d: \u201c2020-10-07T15:55:00.000\u201d, \u201ctimeInBed\u201d: 135}, {\u201cawakeCount\u201d: 0, \u201cawakeDuration\u201d: 0, \u201cawakeningsCount\u201d: 1, \u201cdateOfSleep\u201d: \u201c2020-10-07\u201d, \u201cduration\u201d: 3780000, \u201cefficiency\u201d: 100, \u201cendTime\u201d: \u201c2020-10-07T10:52:30.000\u201d, \u201cisMainSleep\u201d: false, \u201clogId\u201d: 14144903977, \u201cminuteData\u201d: [{\u201cdateTime\u201d: \u201c09:49:00\u201d, \u201cvalue\u201d: \u201c1\u201d}, {\u201cdateTime\u201d: \u201c09:50:00\u201d, \u201cvalue\u201d: \u201c1\u201d}, {\u201cdateTime\u201d: \u201c09:51:00\u201d, \u201cvalue\u201d: \u201c1\u201d},\u2026], \u201cminutesAfterWakeup\u201d: 1, \u201cminutesAsleep\u201d: 62, \u201cminutesAwake\u201d: 0, \u201cminutesToFallAsleep\u201d: 0, \u201crestlessCount\u201d: 1, \u201crestlessDuration\u201d: 1, \u201cstartTime\u201d: \u201c2020-10-07T09:49:00.000\u201d, \u201ctimeInBed\u201d: 63}], \u201csummary\u201d: {\u201ctotalMinutesAsleep\u201d: 185, \u201ctotalSleepRecords\u201d: 2, \u201ctotalTimeInBed\u201d: 198}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d: [{\u201cawakeCount\u201d: 3, \u201cawakeDuration\u201d: 21, \u201cawakeningsCount\u201d: 16, \u201cdateOfSleep\u201d: \u201c2020-10-08\u201d, \u201cduration\u201d: 19260000, \u201cefficiency\u201d: 89, \u201cendTime\u201d: \u201c2020-10-08T06:01:30.000\u201d, \u201cisMainSleep\u201d: true, \u201clogId\u201d: 14150613895, \u201cminuteData\u201d: [{\u201cdateTime\u201d: \u201c00:40:00\u201d, \u201cvalue\u201d: \u201c3\u201d}, {\u201cdateTime\u201d: \u201c00:41:00\u201d, \u201cvalue\u201d: \u201c3\u201d}, {\u201cdateTime\u201d: \u201c00:42:00\u201d, \u201cvalue\u201d: \u201c3\u201d},\u2026], \u201cminutesAfterWakeup\u201d: 0, \u201cminutesAsleep\u201d: 275, \u201cminutesAwake\u201d: 33, \u201cminutesToFallAsleep\u201d: 0, \u201crestlessCount\u201d: 13, \u201crestlessDuration\u201d: 25, \u201cstartTime\u201d: \u201c2020-10-08T00:40:00.000\u201d, \u201ctimeInBed\u201d: 321}], \u201csummary\u201d: {\u201ctotalMinutesAsleep\u201d: 275, \u201ctotalSleepRecords\u201d: 1, \u201ctotalTimeInBed\u201d: 321}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d: [{\u201cawakeCount\u201d: 1, \u201cawakeDuration\u201d: 3, \u201cawakeningsCount\u201d: 8, \u201cdateOfSleep\u201d: \u201c2020-10-09\u201d, \u201cduration\u201d: 19320000, \u201cefficiency\u201d: 96, \u201cendTime\u201d: \u201c2020-10-09T05:57:30.000\u201d, \u201cisMainSleep\u201d: true, \u201clogId\u201d: 14161136803, \u201cminuteData\u201d: [{\u201cdateTime\u201d: \u201c00:35:30\u201d, \u201cvalue\u201d: \u201c2\u201d}, {\u201cdateTime\u201d: \u201c00:36:30\u201d, \u201cvalue\u201d: \u201c1\u201d}, {\u201cdateTime\u201d: \u201c00:37:30\u201d, \u201cvalue\u201d: \u201c1\u201d},\u2026], \u201cminutesAfterWakeup\u201d: 0, \u201cminutesAsleep\u201d: 309, \u201cminutesAwake\u201d: 13, \u201cminutesToFallAsleep\u201d: 0, \u201crestlessCount\u201d: 7, \u201crestlessDuration\u201d: 10, \u201cstartTime\u201d: \u201c2020-10-09T00:35:30.000\u201d, \u201ctimeInBed\u201d: 322}], \u201csummary\u201d: {\u201ctotalMinutesAsleep\u201d: 309, \u201ctotalSleepRecords\u201d: 1, \u201ctotalTimeInBed\u201d: 322}} PLAIN_TEXT device_id local_start_date_time local_end_date_time efficiency minutes_after_wakeup minutes_asleep minutes_awake minutes_to_fall_asleep minutes_in_bed is_main_sleep type count_awake duration_awake count_awakenings count_restless duration_restless a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 15:55:00 2020-10-07 18:10:00 91 0 123 12 0 135 1 classic 2 3 10 8 9 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 09:49:00 2020-10-07 10:52:30 100 1 62 0 0 63 0 classic 0 0 1 1 1 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-08 00:40:00 2020-10-08 06:01:30 89 0 275 33 0 321 1 classic 3 21 16 13 25 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-09 00:35:30 2020-10-09 05:57:30 96 0 309 13 0 322 1 classic 1 3 8 7 10 Example of the structure of source data with Fitbit\u2019s sleep API Version 1.2 JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d:[{\u201cdateOfSleep\u201d:\u201d2020-10-10\u201d,\u201dduration\u201d:3600000,\u201defficiency\u201d:92,\u201dendTime\u201d:\u201d2020-10-10T16:37:00.000\u201d,\u201dinfoCode\u201d:2,\u201disMainSleep\u201d:false,\u201dlevels\u201d:{\u201cdata\u201d:[{\u201cdateTime\u201d:\u201d2020-10-10T15:36:30.000\u201d,\u201dlevel\u201d:\u201drestless\u201d,\u201dseconds\u201d:60},{\u201cdateTime\u201d:\u201d2020-10-10T15:37:30.000\u201d,\u201dlevel\u201d:\u201dasleep\u201d,\u201dseconds\u201d:660},{\u201cdateTime\u201d:\u201d2020-10-10T15:48:30.000\u201d,\u201dlevel\u201d:\u201drestless\u201d,\u201dseconds\u201d:60},\u2026], \u201csummary\u201d:{\u201casleep\u201d:{\u201ccount\u201d:0,\u201dminutes\u201d:56},\u201dawake\u201d:{\u201ccount\u201d:0,\u201dminutes\u201d:0},\u201drestless\u201d:{\u201ccount\u201d:3,\u201dminutes\u201d:4}}},\u201dlogId\u201d:26315914306,\u201dminutesAfterWakeup\u201d:0,\u201dminutesAsleep\u201d:55,\u201dminutesAwake\u201d:5,\u201dminutesToFallAsleep\u201d:0,\u201dstartTime\u201d:\u201d2020-10-10T15:36:30.000\u201d,\u201dtimeInBed\u201d:60,\u201dtype\u201d:\u201dclassic\u201d},{\u201cdateOfSleep\u201d:\u201d2020-10-10\u201d,\u201dduration\u201d:22980000,\u201defficiency\u201d:88,\u201dendTime\u201d:\u201d2020-10-10T08:10:00.000\u201d,\u201dinfoCode\u201d:0,\u201disMainSleep\u201d:true,\u201dlevels\u201d:{\u201cdata\u201d:[{\u201cdateTime\u201d:\u201d2020-10-10T01:46:30.000\u201d,\u201dlevel\u201d:\u201dlight\u201d,\u201dseconds\u201d:420},{\u201cdateTime\u201d:\u201d2020-10-10T01:53:30.000\u201d,\u201dlevel\u201d:\u201ddeep\u201d,\u201dseconds\u201d:1230},{\u201cdateTime\u201d:\u201d2020-10-10T02:14:00.000\u201d,\u201dlevel\u201d:\u201dlight\u201d,\u201dseconds\u201d:360},\u2026], \u201csummary\u201d:{\u201cdeep\u201d:{\u201ccount\u201d:3,\u201dminutes\u201d:92,\u201dthirtyDayAvgMinutes\u201d:0},\u201dlight\u201d:{\u201ccount\u201d:29,\u201dminutes\u201d:193,\u201dthirtyDayAvgMinutes\u201d:0},\u201drem\u201d:{\u201ccount\u201d:4,\u201dminutes\u201d:33,\u201dthirtyDayAvgMinutes\u201d:0},\u201dwake\u201d:{\u201ccount\u201d:28,\u201dminutes\u201d:65,\u201dthirtyDayAvgMinutes\u201d:0}}},\u201dlogId\u201d:26311786557,\u201dminutesAfterWakeup\u201d:0,\u201dminutesAsleep\u201d:318,\u201dminutesAwake\u201d:65,\u201dminutesToFallAsleep\u201d:0,\u201dstartTime\u201d:\u201d2020-10-10T01:46:30.000\u201d,\u201dtimeInBed\u201d:383,\u201dtype\u201d:\u201dstages\u201d}],\u201dsummary\u201d:{\u201cstages\u201d:{\u201cdeep\u201d:92,\u201dlight\u201d:193,\u201drem\u201d:33,\u201dwake\u201d:65},\u201dtotalMinutesAsleep\u201d:373,\u201dtotalSleepRecords\u201d:2,\u201dtotalTimeInBed\u201d:443}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d:[{\u201cdateOfSleep\u201d:\u201d2020-10-11\u201d,\u201dduration\u201d:41640000,\u201defficiency\u201d:89,\u201dendTime\u201d:\u201d2020-10-11T11:47:00.000\u201d,\u201dinfoCode\u201d:0,\u201disMainSleep\u201d:true,\u201dlevels\u201d:{\u201cdata\u201d:[{\u201cdateTime\u201d:\u201d2020-10-11T00:12:30.000\u201d,\u201dlevel\u201d:\u201dwake\u201d,\u201dseconds\u201d:450},{\u201cdateTime\u201d:\u201d2020-10-11T00:20:00.000\u201d,\u201dlevel\u201d:\u201dlight\u201d,\u201dseconds\u201d:870},{\u201cdateTime\u201d:\u201d2020-10-11T00:34:30.000\u201d,\u201dlevel\u201d:\u201dwake\u201d,\u201dseconds\u201d:780},\u2026], \u201csummary\u201d:{\u201cdeep\u201d:{\u201ccount\u201d:4,\u201dminutes\u201d:52,\u201dthirtyDayAvgMinutes\u201d:62},\u201dlight\u201d:{\u201ccount\u201d:32,\u201dminutes\u201d:442,\u201dthirtyDayAvgMinutes\u201d:364},\u201drem\u201d:{\u201ccount\u201d:6,\u201dminutes\u201d:68,\u201dthirtyDayAvgMinutes\u201d:58},\u201dwake\u201d:{\u201ccount\u201d:29,\u201dminutes\u201d:132,\u201dthirtyDayAvgMinutes\u201d:94}}},\u201dlogId\u201d:26589710670,\u201dminutesAfterWakeup\u201d:1,\u201dminutesAsleep\u201d:562,\u201dminutesAwake\u201d:132,\u201dminutesToFallAsleep\u201d:0,\u201dstartTime\u201d:\u201d2020-10-11T00:12:30.000\u201d,\u201dtimeInBed\u201d:694,\u201dtype\u201d:\u201dstages\u201d}],\u201dsummary\u201d:{\u201cstages\u201d:{\u201cdeep\u201d:52,\u201dlight\u201d:442,\u201drem\u201d:68,\u201dwake\u201d:132},\u201dtotalMinutesAsleep\u201d:562,\u201dtotalSleepRecords\u201d:1,\u201dtotalTimeInBed\u201d:694}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 {\u201csleep\u201d:[{\u201cdateOfSleep\u201d:\u201d2020-10-12\u201d,\u201dduration\u201d:28980000,\u201defficiency\u201d:93,\u201dendTime\u201d:\u201d2020-10-12T09:34:30.000\u201d,\u201dinfoCode\u201d:0,\u201disMainSleep\u201d:true,\u201dlevels\u201d:{\u201cdata\u201d:[{\u201cdateTime\u201d:\u201d2020-10-12T01:31:00.000\u201d,\u201dlevel\u201d:\u201dwake\u201d,\u201dseconds\u201d:600},{\u201cdateTime\u201d:\u201d2020-10-12T01:41:00.000\u201d,\u201dlevel\u201d:\u201dlight\u201d,\u201dseconds\u201d:60},{\u201cdateTime\u201d:\u201d2020-10-12T01:42:00.000\u201d,\u201dlevel\u201d:\u201ddeep\u201d,\u201dseconds\u201d:2340},\u2026], \u201csummary\u201d:{\u201cdeep\u201d:{\u201ccount\u201d:4,\u201dminutes\u201d:63,\u201dthirtyDayAvgMinutes\u201d:59},\u201dlight\u201d:{\u201ccount\u201d:27,\u201dminutes\u201d:257,\u201dthirtyDayAvgMinutes\u201d:364},\u201drem\u201d:{\u201ccount\u201d:5,\u201dminutes\u201d:94,\u201dthirtyDayAvgMinutes\u201d:58},\u201dwake\u201d:{\u201ccount\u201d:24,\u201dminutes\u201d:69,\u201dthirtyDayAvgMinutes\u201d:95}}},\u201dlogId\u201d:26589710673,\u201dminutesAfterWakeup\u201d:0,\u201dminutesAsleep\u201d:415,\u201dminutesAwake\u201d:68,\u201dminutesToFallAsleep\u201d:0,\u201dstartTime\u201d:\u201d2020-10-12T01:31:00.000\u201d,\u201dtimeInBed\u201d:483,\u201dtype\u201d:\u201dstages\u201d}],\u201dsummary\u201d:{\u201cstages\u201d:{\u201cdeep\u201d:63,\u201dlight\u201d:257,\u201drem\u201d:94,\u201dwake\u201d:69},\u201dtotalMinutesAsleep\u201d:415,\u201dtotalSleepRecords\u201d:1,\u201dtotalTimeInBed\u201d:483}} PLAIN_TEXT device_id local_start_date_time local_end_date_time efficiency minutes_after_wakeup minutes_asleep minutes_awake minutes_to_fall_asleep minutes_in_bed is_main_sleep type a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-10 15:36:30 2020-10-10 16:37:00 92 0 55 5 0 60 0 classic a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-10 01:46:30 2020-10-10 08:10:00 88 0 318 65 0 383 1 stages a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-11 00:12:30 2020-10-11 11:47:00 89 1 562 132 0 694 1 stages a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-12 01:31:00 2020-10-12 09:34:30 93 0 415 68 0 483 1 stages"},{"location":"features/fitbit-sleep-summary/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments</p> <ul> <li>Only available for segments that span 1 or more complete days (e.g. Jan 1<sup>st</sup> 00:00 to Jan 3<sup>rd</sup> 23:59)</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/fitbit_sleep_summary_raw.csv\n- data/raw/{pid}/fitbit_sleep_summary_parsed.csv\n- data/raw/{pid}/fitbit_sleep_summary_parsed_with_datetime.csv\n- data/interim/{pid}/fitbit_sleep_summary_features/fitbit_sleep_summary_{language}_{provider_key}.csv\n- data/processed/features/{pid}/fitbit_sleep_summary.csv\n</code></pre> <p>Parameters description for <code>[FITBIT_SLEEP_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>FITBIT_SLEEP_SUMMARY</code> features from the <code>RAPIDS</code> provider <code>[SLEEP_TYPES]</code> Types of sleep to be included in the feature extraction computation. Fitbit provides 3 types of sleep: <code>main</code>, <code>nap</code>, <code>all</code>. <code>[FEATURES]</code> Features to be computed from sleep summary data, see table below <p>Features description for <code>[FITBIT_SLEEP_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description countepisodeTYPE episodes Number of sleep episodes for a certain sleep type during a time segment. avgefficiencyTYPE scores Average sleep efficiency for a certain sleep type during a time segment. sumdurationafterwakeupTYPE minutes Total duration the user stayed in bed after waking up for a certain sleep type during a time segment. sumdurationasleepTYPE minutes Total sleep duration for a certain sleep type during a time segment. sumdurationawakeTYPE minutes Total duration the user stayed awake but still in bed for a certain sleep type during a time segment. sumdurationtofallasleepTYPE minutes Total duration the user spent to fall asleep for a certain sleep type during a time segment. sumdurationinbedTYPE minutes Total duration the user stayed in bed (sumdurationtofallasleep + sumdurationawake + sumdurationasleep + sumdurationafterwakeup) for a certain sleep type during a time segment. avgdurationafterwakeupTYPE minutes Average duration the user stayed in bed after waking up for a certain sleep type during a time segment. avgdurationasleepTYPE minutes Average sleep duration for a certain sleep type during a time segment. avgdurationawakeTYPE minutes Average duration the user stayed awake but still in bed for a certain sleep type during a time segment. avgdurationtofallasleepTYPE minutes Average duration the user spent to fall asleep for a certain sleep type during a time segment. avgdurationinbedTYPE minutes Average duration the user stayed in bed (sumdurationtofallasleep + sumdurationawake + sumdurationasleep + sumdurationafterwakeup) for a certain sleep type during a time segment. <p>Assumptions/Observations</p> <ol> <li> <p>There are three sleep types (TYPE): <code>main</code>, <code>nap</code>, <code>all</code>. The <code>all</code> type contains both main sleep and naps.</p> </li> <li> <p>There are two versions of Fitbit\u2019s sleep API (version 1 and version 1.2), and each provides raw sleep data in a different format:</p> <ul> <li>Count &amp; duration summaries. <code>v1</code> contains <code>count_awake</code>, <code>duration_awake</code>, <code>count_awakenings</code>, <code>count_restless</code>, and <code>duration_restless</code> fields for every sleep record but <code>v1.2</code> does not.</li> </ul> </li> <li> <p>API columns. Features are computed based on the values provided by Fitbit\u2019s API: <code>efficiency</code>, <code>minutes_after_wakeup</code>, <code>minutes_asleep</code>, <code>minutes_awake</code>, <code>minutes_to_fall_asleep</code>, <code>minutes_in_bed</code>, <code>is_main_sleep</code> and <code>type</code>.</p> </li> </ol>"},{"location":"features/fitbit-steps-intraday/","title":"Fitbit Steps Intraday","text":"<p>Sensor parameters description for <code>[FITBIT_STEPS_INTRADAY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table name or file path where the steps intraday data is stored. The configuration keys in Device Data Source Configuration control whether this parameter is interpreted as table or file. <p>The format of the column(s) containing the Fitbit sensor data can be <code>JSON</code> or <code>PLAIN_TEXT</code>. The data in <code>JSON</code> format is obtained directly from the Fitbit API. We support <code>PLAIN_TEXT</code> in case you already parsed your data and don\u2019t have access to your participants\u2019 Fitbit accounts anymore. If your data is in <code>JSON</code> format then summary and intraday data come packed together. </p> <p>We provide examples of the input format that RAPIDS expects, note that both examples for <code>JSON</code> and <code>PLAIN_TEXT</code> are tabular and the actual format difference comes in the <code>fitbit_data</code> column (we truncate the <code>JSON</code> example for brevity).</p> Example of the structure of source data JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-07\u201d,\u201dvalue\u201d:\u201d1775\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:5},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:3},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:0},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-08\u201d,\u201dvalue\u201d:\u201d3201\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:14},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:11},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:10},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-09\u201d,\u201dvalue\u201d:\u201d998\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:0},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:0},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:0},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} PLAIN_TEXT device_id local_date_time steps a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:00:00 5 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:01:00 3 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 00:02:00 0"},{"location":"features/fitbit-steps-intraday/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments</p> <ul> <li>Available for all time segments</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/fitbit_steps_intraday_raw.csv\n- data/raw/{pid}/fitbit_steps_intraday_parsed.csv\n- data/raw/{pid}/fitbit_steps_intraday_parsed_with_datetime.csv\n- data/interim/{pid}/fitbit_steps_intraday_features/fitbit_steps_intraday_{language}_{provider_key}.csv\n- data/processed/features/{pid}/fitbit_steps_intraday.csv\n</code></pre> <p>Parameters description for <code>[FITBIT_STEPS_INTRADAY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>FITBIT_STEPS_INTRADAY</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed from steps intraday data, see table below <code>[THRESHOLD_ACTIVE_BOUT]</code> Every minute with Fitbit steps data wil be labelled as <code>sedentary</code> if its step count is below this threshold, otherwise, <code>active</code>. <code>[INCLUDE_ZERO_STEP_ROWS]</code> Whether or not to include time segments with a 0 step count during the whole day. <p>Features description for <code>[FITBIT_STEPS_INTRADAY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description sumsteps steps The total step count during a time segment. maxsteps steps The maximum step count during a time segment. minsteps steps The minimum step count during a time segment. avgsteps steps The average step count during a time segment. stdsteps steps The standard deviation of step count during a time segment. countepisodesedentarybout bouts Number of sedentary bouts during a time segment. sumdurationsedentarybout minutes Total duration of all sedentary bouts during a time segment. maxdurationsedentarybout minutes The maximum duration of any sedentary bout during a time segment. mindurationsedentarybout minutes The minimum duration of any sedentary bout during a time segment. avgdurationsedentarybout minutes The average duration of sedentary bouts during a time segment. stddurationsedentarybout minutes The standard deviation of the duration of sedentary bouts during a time segment. countepisodeactivebout bouts Number of active bouts during a time segment. sumdurationactivebout minutes Total duration of all active bouts during a time segment. maxdurationactivebout minutes The maximum duration of any active bout during a time segment. mindurationactivebout minutes The minimum duration of any active bout during a time segment. avgdurationactivebout minutes The average duration of active bouts during a time segment. stddurationactivebout minutes The standard deviation of the duration of active bouts during a time segment. <p>Assumptions/Observations</p> <ol> <li>Active and sedentary bouts. If the step count per minute is smaller than <code>THRESHOLD_ACTIVE_BOUT</code> (default value is 10), that minute is labelled as sedentary, otherwise, is labelled as active. Active and sedentary bouts are periods of consecutive minutes labelled as <code>active</code> or <code>sedentary</code>.</li> </ol>"},{"location":"features/fitbit-steps-summary/","title":"Fitbit Steps Summary","text":"<p>Sensor parameters description for <code>[FITBIT_STEPS_SUMMARY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table name or file path where the steps summary data is stored. The configuration keys in Device Data Source Configuration control whether this parameter is interpreted as table or file. <p>The format of the column(s) containing the Fitbit sensor data can be <code>JSON</code> or <code>PLAIN_TEXT</code>. The data in <code>JSON</code> format is obtained directly from the Fitbit API. We support <code>PLAIN_TEXT</code> in case you already parsed your data and don\u2019t have access to your participants\u2019 Fitbit accounts anymore. If your data is in <code>JSON</code> format then summary and intraday data come packed together. </p> <p>We provide examples of the input format that RAPIDS expects, note that both examples for <code>JSON</code> and <code>PLAIN_TEXT</code> are tabular and the actual format difference comes in the <code>fitbit_data</code> column (we truncate the <code>JSON</code> example for brevity).</p> Example of the structure of source data JSON device_id fitbit_data a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-07\u201d,\u201dvalue\u201d:\u201d1775\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:5},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:3},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:0},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-08\u201d,\u201dvalue\u201d:\u201d3201\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:14},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:11},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:10},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} a748ee1a-1d0b-4ae9-9074-279a2b6ba524 \u201cactivities-steps\u201d:[{\u201cdateTime\u201d:\u201d2020-10-09\u201d,\u201dvalue\u201d:\u201d998\u201d}],\u201dactivities-steps-intraday\u201d:{\u201cdataset\u201d:[{\u201ctime\u201d:\u201d00:00:00\u201d,\u201dvalue\u201d:0},{\u201ctime\u201d:\u201d00:01:00\u201d,\u201dvalue\u201d:0},{\u201ctime\u201d:\u201d00:02:00\u201d,\u201dvalue\u201d:0},\u2026],\u201ddatasetInterval\u201d:1,\u201ddatasetType\u201d:\u201dminute\u201d}} PLAIN_TEXT device_id local_date_time steps a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-07 1775 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-08 3201 a748ee1a-1d0b-4ae9-9074-279a2b6ba524 2020-10-09 998"},{"location":"features/fitbit-steps-summary/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments</p> <ul> <li>Only available for segments that span 1 or more complete days (e.g. Jan 1<sup>st</sup> 00:00 to Jan 3<sup>rd</sup> 23:59)</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/fitbit_steps_summary_raw.csv\n- data/raw/{pid}/fitbit_steps_summary_parsed.csv\n- data/raw/{pid}/fitbit_steps_summary_parsed_with_datetime.csv\n- data/interim/{pid}/fitbit_steps_summary_features/fitbit_steps_summary_{language}_{provider_key}.csv\n- data/processed/features/{pid}/fitbit_steps_summary.csv\n</code></pre> <p>Parameters description for <code>[FITBIT_STEPS_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>FITBIT_STEPS_SUMMARY</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed from steps summary data, see table below <p>Features description for <code>[FITBIT_STEPS_SUMMARY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description maxsumsteps steps The maximum daily step count during a time segment. minsumsteps steps The minimum daily step count during a time segment. avgsumsteps steps The average daily step count during a time segment. mediansumsteps steps The median of daily step count during a time segment. stdsumsteps steps The standard deviation of daily step count during a time segment. <p>Assumptions/Observations</p> <p>NA</p>"},{"location":"features/phone-accelerometer/","title":"Phone Accelerometer","text":"<p>Sensor parameters description for <code>[PHONE_ACCELEROMETER]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the accelerometer data is stored"},{"location":"features/phone-accelerometer/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_accelerometer_raw.csv\n- data/raw/{pid}/phone_accelerometer_with_datetime.csv\n- data/interim/{pid}/phone_accelerometer_features/phone_accelerometer_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_accelerometer.csv\n</code></pre> <p>Parameters description for <code>[PHONE_ACCELEROMETER][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_ACCELEROMETER</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_ACCELEROMETER][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description maxmagnitude m/s<sup>2</sup> The maximum magnitude of acceleration (\\(\\|acceleration\\| = \\sqrt{x^2 + y^2 + z^2}\\)). minmagnitude m/s<sup>2</sup> The minimum magnitude of acceleration. avgmagnitude m/s<sup>2</sup> The average magnitude of acceleration. medianmagnitude m/s<sup>2</sup> The median magnitude of acceleration. stdmagnitude m/s<sup>2</sup> The standard deviation of acceleration. <p>Assumptions/Observations</p> <ol> <li>Analyzing accelerometer data is a memory intensive task. If RAPIDS crashes is likely because the accelerometer dataset for a participant is to big to fit in memory. We are considering different alternatives to overcome this problem.</li> </ol>"},{"location":"features/phone-accelerometer/#panda-provider","title":"PANDA provider","text":"<p>These features are based on the work by Panda et al.</p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_accelerometer_raw.csv\n- data/raw/{pid}/phone_accelerometer_with_datetime.csv\n- data/interim/{pid}/phone_accelerometer_features/phone_accelerometer_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_accelerometer.csv\n</code></pre> <p>Parameters description for <code>[PHONE_ACCELEROMETER][PROVIDERS][PANDA]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_ACCELEROMETER</code> features from the <code>PANDA</code> provider <code>[FEATURES]</code> Features to be computed for exertional and non-exertional activity episodes, see table below <p>Features description for <code>[PHONE_ACCELEROMETER][PROVIDERS][PANDA]</code>:</p> Feature Units Description sumduration minutes Total duration of all exertional or non-exertional activity episodes. maxduration minutes Longest duration of any exertional or non-exertional activity episode. minduration minutes Shortest duration of any exertional or non-exertional activity episode. avgduration minutes Average duration of any exertional or non-exertional activity episode. medianduration minutes Median duration of any exertional or non-exertional activity episode. stdduration minutes Standard deviation of the duration of all exertional or non-exertional activity episodes. <p>Assumptions/Observations</p> <ol> <li>Analyzing accelerometer data is a memory intensive task. If RAPIDS crashes is likely because the accelerometer dataset for a participant is to big to fit in memory. We are considering different alternatives to overcome this problem.</li> <li>See Panda et al for a definition of exertional and non-exertional activity episodes</li> </ol>"},{"location":"features/phone-activity-recognition/","title":"Phone Activity Recognition","text":"<p>Sensor parameters description for <code>[PHONE_ACTIVITY_RECOGNITION]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE][ANDROID]</code> Database table where the activity data from Android devices is stored (the AWARE client saves this data on different tables for Android and iOS) <code>[TABLE][IOS]</code> Database table where the activity data from iOS devices is stored (the AWARE client saves this data on different tables for Android and iOS) <code>[EPISODE_THRESHOLD_BETWEEN_ROWS]</code> Difference in minutes between any two rows for them to be considered part of the same activity episode"},{"location":"features/phone-activity-recognition/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_activity_recognition_raw.csv\n- data/raw/{pid}/phone_activity_recognition_with_datetime.csv\n- data/raw/{pid}/phone_activity_recognition_with_datetime_unified.csv\n- data/interim/{pid}/phone_activity_recognition_episodes.csv\n- data/interim/{pid}/phone_activity_recognition_episodes_resampled.csv\n- data/interim/{pid}/phone_activity_recognition_episodes_resampled_with_datetime.csv\n- data/interim/{pid}/phone_activity_recognition_features/phone_activity_recognition_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_activity_recognition.csv\n</code></pre> <p>Parameters description for <code>[PHONE_ACTIVITY_RECOGNITION][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_ACTIVITY_RECOGNITION</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[ACTIVITY_CLASSES][STATIONARY]</code> An array of the activity labels to be considered in the <code>STATIONARY</code> category choose any of <code>still</code>, <code>tilting</code> <code>[ACTIVITY_CLASSES][MOBILE]</code> An array of the activity labels to be considered in the <code>MOBILE</code> category choose any of <code>on_foot</code>, <code>walking</code>, <code>running</code>, <code>on_bicycle</code> <code>[ACTIVITY_CLASSES][VEHICLE]</code> An array of the activity labels to be considered in the <code>VEHICLE</code> category choose any of <code>in_vehicule</code> <p>Features description for <code>[PHONE_ACTIVITY_RECOGNITION][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description count rows Number of episodes. mostcommonactivity activity type The most common activity type (e.g. <code>still</code>, <code>on_foot</code>, etc.). If there is a tie, the first one is chosen. countuniqueactivities activity type Number of unique activities. durationstationary minutes The total duration of <code>[ACTIVITY_CLASSES][STATIONARY]</code> episodes durationmobile minutes The total duration of <code>[ACTIVITY_CLASSES][MOBILE]</code> episodes of on foot, running, and on bicycle activities durationvehicle minutes The total duration of <code>[ACTIVITY_CLASSES][VEHICLE]</code> episodes of on vehicle activity <p>Assumptions/Observations</p> <ol> <li> <p>iOS Activity Recognition names and types are unified with Android labels: </p> iOS Activity Name Android Activity Name Android Activity Type <code>walking</code> <code>walking</code> <code>7</code> <code>running</code> <code>running</code> <code>8</code> <code>cycling</code> <code>on_bicycle</code> <code>1</code> <code>automotive</code> <code>in_vehicle</code> <code>0</code> <code>stationary</code> <code>still</code> <code>3</code> <code>unknown</code> <code>unknown</code> <code>4</code> </li> <li> <p>In AWARE, Activity Recognition data for Android and iOS are stored in two different database tables, RAPIDS automatically infers what platform each participant belongs to based on their participant file.</p> </li> </ol>"},{"location":"features/phone-applications-foreground/","title":"Phone Applications Foreground","text":"<p>Sensor parameters description for <code>[PHONE_APPLICATIONS_FOREGROUND]</code> (these parameters are used by the only provider available at the moment, RAPIDS):</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the applications foreground data is stored <code>[APPLICATION_CATEGORIES][CATALOGUE_SOURCE]</code> <code>FILE</code> or <code>GOOGLE</code>. If <code>FILE</code>, app categories (genres) are read from <code>[CATALOGUE_FILE]</code>. If <code>[GOOGLE]</code>, app categories (genres) are scrapped from the Play Store <code>[APPLICATION_CATEGORIES][CATALOGUE_FILE]</code> CSV file with a <code>package_name</code> and <code>genre</code> column. By default we provide the catalogue created by Stachl et al in <code>data/external/stachl_application_genre_catalogue.csv</code> <code>[APPLICATION_CATEGORIES][UPDATE_CATALOGUE_FILE]</code> if <code>[CATALOGUE_SOURCE]</code> is equal to <code>FILE</code>, this flag signals whether or not to update <code>[CATALOGUE_FILE]</code>, if <code>[CATALOGUE_SOURCE]</code> is equal to <code>GOOGLE</code> all scraped genres will be saved to <code>[CATALOGUE_FILE]</code> <code>[APPLICATION_CATEGORIES][SCRAPE_MISSING_CATEGORIES]</code> This flag signals whether or not to scrape categories (genres) missing from the <code>[CATALOGUE_FILE]</code>. If <code>[CATALOGUE_SOURCE]</code> is equal to <code>GOOGLE</code>, all genres are scraped anyway (this flag is ignored)"},{"location":"features/phone-applications-foreground/#rapids-provider","title":"RAPIDS provider","text":"<p>The app category (genre) catalogue used in these features was originally created by Stachl et al.</p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_applications_foreground_raw.csv\n- data/raw/{pid}/phone_applications_foreground_with_datetime.csv\n- data/raw/{pid}/phone_applications_foreground_with_datetime_with_categories.csv\n- data/interim/{pid}/phone_applications_foreground_features/phone_applications_foreground_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_applications_foreground.csv\n</code></pre> <p>Parameters description for <code>[PHONE_APPLICATIONS_FOREGROUND][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_APPLICATIONS_FOREGROUND</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[SINGLE_CATEGORIES]</code> An array of app categories to be included in the feature extraction computation. The special keyword <code>all</code> represents a category with all the apps from each participant. By default we use the category catalogue pointed by <code>[APPLICATION_CATEGORIES][CATALOGUE_FILE]</code> (see the Sensor parameters description table above) <code>[MULTIPLE_CATEGORIES]</code> An array of collections representing meta-categories (a group of categories). They key of each element is the name of the <code>meta-category</code> and the value is an array of member app categories. By default we use the category catalogue pointed by <code>[APPLICATION_CATEGORIES][CATALOGUE_FILE]</code> (see the Sensor parameters description table above) <code>[SINGLE_APPS]</code> An array of apps to be included in the feature extraction computation. Use their package name (e.g. <code>com.google.android.youtube</code>) or the reserved keyword <code>top1global</code> (the most used app by a participant over the whole monitoring study) <code>[EXCLUDED_CATEGORIES]</code> An array of app categories to be excluded from the feature extraction computation. By default we use the category catalogue pointed by <code>[APPLICATION_CATEGORIES][CATALOGUE_FILE]</code> (see the Sensor parameters description table above) <code>[EXCLUDED_APPS]</code> An array of apps to be excluded from the feature extraction computation. Use their package name, for example: <code>com.google.android.youtube</code> <p>Features description for <code>[PHONE_APPLICATIONS_FOREGROUND][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description count apps Number of times a single app or apps within a category were used (i.e. they were brought to the foreground either by tapping their icon or switching to it from another app) timeoffirstuse minutes The time in minutes between 12:00am (midnight) and the first use of a single app or apps within a category during a <code>time_segment</code> timeoflastuse minutes The time in minutes between 12:00am (midnight) and the last use of a single app or apps within a category during a <code>time_segment</code> frequencyentropy nats The entropy of the used apps within a category during a <code>time_segment</code> (each app is seen as a unique event, the more apps were used, the higher the entropy). This is especially relevant when computed over all apps. Entropy cannot be obtained for a single app <p>Assumptions/Observations</p> <p>Features can be computed by app, by apps grouped under a single category (genre) and by multiple categories grouped together (meta-categories). For example, we can get features for <code>Facebook</code> (single app), for <code>Social Network</code> apps (a category including Facebook and other social media apps) or for <code>Social</code> (a meta-category formed by <code>Social Network</code> and <code>Social Media Tools</code> categories).</p> <p>Apps installed by default like YouTube are considered systems apps on some phones. We do an exact match to exclude apps where \u201cgenre\u201d == <code>EXCLUDED_CATEGORIES</code> or \u201cpackage_name\u201d == <code>EXCLUDED_APPS</code>.</p> <p>We provide three ways of classifying and app within a category (genre): a) by automatically scraping its official category from the Google Play Store, b) by using the catalogue created by Stachl et al. which we provide in RAPIDS (<code>data/external/stachl_application_genre_catalogue.csv</code>), or c) by manually creating a personalized catalogue. You can choose a, b or c by modifying <code>[APPLICATION_GENRES]</code> keys and values (see the Sensor parameters description table above).</p>"},{"location":"features/phone-battery/","title":"Phone Battery","text":"<p>Sensor parameters description for <code>[PHONE_BATTERY]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the battery data is stored <code>[EPISODE_THRESHOLD_BETWEEN_ROWS]</code> Difference in minutes between any two rows for them to be considered part of the same battery charge or discharge episode"},{"location":"features/phone-battery/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_battery_raw.csv\n- data/interim/{pid}/phone_battery_episodes.csv\n- data/interim/{pid}/phone_battery_episodes_resampled.csv\n- data/interim/{pid}/phone_battery_episodes_resampled_with_datetime.csv\n- data/interim/{pid}/phone_battery_features/phone_battery_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_battery.csv\n</code></pre> <p>Parameters description for <code>[PHONE_BATTERY][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_BATTERY</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_BATTERY][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description countdischarge episodes Number of discharging episodes. sumdurationdischarge minutes The total duration of all discharging episodes. countcharge episodes Number of battery charging episodes. sumdurationcharge minutes The total duration of all charging episodes. avgconsumptionrate episodes/minutes The average of all episodes\u2019 consumption rates. An episode\u2019s consumption rate is defined as the ratio between its battery delta and duration maxconsumptionrate episodes/minutes The highest of all episodes\u2019 consumption rates. An episode\u2019s consumption rate is defined as the ratio between its battery delta and duration <p>Assumptions/Observations</p> <ol> <li>We convert battery data collected with iOS client v1 (autodetected because battery status <code>4</code> do not exist) to match Android battery format: we swap status <code>3</code> for <code>5</code> and <code>1</code> for <code>3</code></li> <li>We group battery data into discharge or charge episodes considering any contiguous rows with consecutive reductions or increases of the battery level if they are logged within <code>[EPISODE_THRESHOLD_BETWEEN_ROWS]</code> minutes from each other.</li> </ol>"},{"location":"features/phone-bluetooth/","title":"Phone Bluetooth","text":"<p>Sensor parameters description for <code>[PHONE_BLUETOOTH]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the bluetooth data is stored"},{"location":"features/phone-bluetooth/#rapids-provider","title":"RAPIDS provider","text":"<p>Warning</p> <p>The features of this provider are deprecated in favor of <code>DORYAB</code> provider (see below).</p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_bluetooth_raw.csv\n- data/raw/{pid}/phone_bluetooth_with_datetime.csv\n- data/interim/{pid}/phone_bluetooth_features/phone_bluetooth_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_bluetooth.csv\"\n</code></pre> <p>Parameters description for <code>[PHONE_BLUETOOTH][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_BLUETOOTH</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_BLUETOOTH][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description countscans devices Number of scanned devices during a time segment, a device can be detected multiple times over time and these appearances are counted separately uniquedevices devices Number of unique devices during a time segment as identified by their hardware (<code>bt_address</code>) address countscansmostuniquedevice scans Number of scans of the most sensed device within each time segment instance <p>Assumptions/Observations</p> <ul> <li>From <code>v0.2.0</code> <code>countscans</code>, <code>uniquedevices</code>, <code>countscansmostuniquedevice</code> were deprecated because they overlap with the respective features for <code>ALL</code> devices of the <code>PHONE_BLUETOOTH</code> <code>DORYAB</code> provider</li> </ul>"},{"location":"features/phone-bluetooth/#doryab-provider","title":"DORYAB provider","text":"<p>This provider is adapted from the work by Doryab et al. </p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_bluetooth_raw.csv\n- data/raw/{pid}/phone_bluetooth_with_datetime.csv\n- data/interim/{pid}/phone_bluetooth_features/phone_bluetooth_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_bluetooth.csv\"\n</code></pre> <p>Parameters description for <code>[PHONE_BLUETOOTH][PROVIDERS][DORYAB]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_BLUETOOTH</code> features from the <code>DORYAB</code> provider <code>[FEATURES]</code> Features to be computed, see table below. These features are computed for three device categories: <code>all</code> devices, <code>own</code> devices and <code>other</code> devices. <p>Features description for <code>[PHONE_BLUETOOTH][PROVIDERS][DORYAB]</code>:</p> Feature\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Units Description countscans scans Number of scans (rows) from the devices sensed during a time segment instance. The more scans a bluetooth device has the longer it remained within range of the participant\u2019s phone uniquedevices devices Number of unique bluetooth devices sensed during a time segment instance as identified by their hardware addresses (<code>bt_address</code>) meanscans scans Mean of the scans of every sensed device within each time segment instance stdscans scans Standard deviation of the scans of every sensed device within each time segment instance countscansmostfrequentdevicewithinsegments scans Number of scans of the most sensed device within each time segment instance countscansleastfrequentdevicewithinsegments scans Number of scans of the least sensed device within each time segment instance countscansmostfrequentdeviceacrosssegments scans Number of scans of the most sensed device across time segment instances of the same type countscansleastfrequentdeviceacrosssegments scans Number of scans of the least sensed device across time segment instances of the same type per device countscansmostfrequentdeviceacrossdataset scans Number of scans of the most sensed device across the entire dataset of every participant countscansleastfrequentdeviceacrossdataset scans Number of scans of the least sensed device across the entire dataset of every participant <p>Assumptions/Observations</p> <ul> <li>Devices are classified as belonging to the participant (<code>own</code>) or to other people (<code>others</code>) using k-means based on the number of times and the number of days each device was detected across each participant\u2019s dataset. See Doryab et al for more details.</li> <li>If ownership cannot be computed because all devices were detected on only one day, they are all considered as <code>other</code>. Thus <code>all</code> and <code>other</code> features will be equal. The likelihood of this scenario decreases the more days of data you have.</li> <li>The most and least frequent devices will be the same across time segment instances and across the entire dataset when every time segment instance covers every hour of a dataset. For example, daily segments (00:00 to 23:59) fall in this category but morning segments (06:00am to 11:59am) or periodic 30-minute segments don\u2019t.</li> </ul> Example Simplified raw bluetooth data <p>The following is a simplified example with bluetooth data from three days and two time segments: morning and afternoon. There are two <code>own</code> devices: <code>5C836F5-487E-405F-8E28-21DBD40FA4FF</code> detected seven times across two days and <code>499A1EAF-DDF1-4657-986C-EA5032104448</code> detected eight times on a single day. <pre><code>local_date  segment     bt_address                              own_device\n2016-11-29  morning     55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-29  morning     55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-29  morning     55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-29  morning     55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-29  morning     48872A52-68DE-420D-98DA-73339A1C4685              0\n2016-11-29  afternoon   55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-29  afternoon   48872A52-68DE-420D-98DA-73339A1C4685              0\n2016-11-30  morning     55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2016-11-30  morning     48872A52-68DE-420D-98DA-73339A1C4685              0\n2016-11-30  morning     25262DC7-780C-4AD5-AD3A-D9776AEF7FC1              0\n2016-11-30  morning     5B1E6981-2E50-4D9A-99D8-67AED430C5A8              0\n2016-11-30  morning     5B1E6981-2E50-4D9A-99D8-67AED430C5A8              0\n2016-11-30  afternoon   55C836F5-487E-405F-8E28-21DBD40FA4FF              1\n2017-05-07  morning     5C5A9C41-2F68-4CEB-96D0-77DE3729B729              0\n2017-05-07  morning     25262DC7-780C-4AD5-AD3A-D9776AEF7FC1              0\n2017-05-07  morning     5B1E6981-2E50-4D9A-99D8-67AED430C5A8              0\n2017-05-07  morning     6C444841-FE64-4375-BC3F-FA410CDC0AC7              0\n2017-05-07  morning     4DC7A22D-9F1F-4DEF-8576-086910AABCB5              0\n2017-05-07  afternoon   5B1E6981-2E50-4D9A-99D8-67AED430C5A8              0\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n2017-05-07  afternoon   499A1EAF-DDF1-4657-986C-EA5032104448              1\n</code></pre></p> The most and least frequent <code>OTHER</code> devices (<code>own_device == 0</code>) during morning segments <p>The most and least frequent <code>ALL</code>|<code>OWN</code>|<code>OTHER</code> devices are computed within each time segment instance, across time segment instances of the same type and across the entire dataset of each person. These are the most and least frequent devices for <code>OTHER</code> devices during morning segments. <pre><code>most frequent device across 2016-11-29 morning:   '48872A52-68DE-420D-98DA-73339A1C4685'  (this device is the only one in this instance)\nleast frequent device across 2016-11-29 morning:  '48872A52-68DE-420D-98DA-73339A1C4685'  (this device is the only one in this instance)\nmost frequent device across 2016-11-30 morning:   '5B1E6981-2E50-4D9A-99D8-67AED430C5A8'\nleast frequent device across 2016-11-30 morning:  '25262DC7-780C-4AD5-AD3A-D9776AEF7FC1'  (when tied, the first occurance is chosen)\nmost frequent device across 2017-05-07 morning:   '25262DC7-780C-4AD5-AD3A-D9776AEF7FC1'  (when tied, the first occurance is chosen)\nleast frequent device across 2017-05-07 morning:  '25262DC7-780C-4AD5-AD3A-D9776AEF7FC1'  (when tied, the first occurance is chosen)\n\nmost frequent across morning segments:            '5B1E6981-2E50-4D9A-99D8-67AED430C5A8'\nleast frequent across morning segments:           '6C444841-FE64-4375-BC3F-FA410CDC0AC7' (when tied, the first occurance is chosen)\n\nmost frequent across dataset:                     '499A1EAF-DDF1-4657-986C-EA5032104448' (only taking into account \"morning\" segments)\nleast frequent across dataset:                    '4DC7A22D-9F1F-4DEF-8576-086910AABCB5' (when tied, the first occurance is chosen)\n</code></pre></p> Bluetooth features for  <code>OTHER</code> devices and morning segments <p>For brevity we only show the following features for morning segments: <pre><code>OTHER: \n    DEVICES: [\"countscans\", \"uniquedevices\", \"meanscans\", \"stdscans\"]\n    SCANS_MOST_FREQUENT_DEVICE: [\"withinsegments\", \"acrosssegments\", \"acrossdataset\"]\n</code></pre></p> <p>Note that <code>countscansmostfrequentdeviceacrossdatasetothers</code> is all <code>0</code>s because <code>499A1EAF-DDF1-4657-986C-EA5032104448</code> is excluded from the count as is labelled as an <code>own</code> device (not <code>other</code>). <pre><code>local_segment       countscansothers    uniquedevicesothers meanscansothers stdscansothers  countscansmostfrequentdevicewithinsegmentsothers    countscansmostfrequentdeviceacrosssegmentsothers    countscansmostfrequentdeviceacrossdatasetothers\n2016-11-29-morning  1                   1                   1.000000        NaN             1                                                   0.0                                                 0.0\n2016-11-30-morning  4                   3                   1.333333        0.57735         2                                                   2.0                                                 2.0\n2017-05-07-morning  5                   5                   1.000000        0.00000         1                                                   1.0                                                 1.0\n</code></pre></p>"},{"location":"features/phone-calls/","title":"Phone Calls","text":"<p>Sensor parameters description for <code>[PHONE_CALLS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the calls data is stored"},{"location":"features/phone-calls/#rapids-provider","title":"RAPIDS Provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_calls_raw.csv\n- data/raw/{pid}/phone_calls_with_datetime.csv\n- data/raw/{pid}/phone_calls_with_datetime_unified.csv\n- data/interim/{pid}/phone_calls_features/phone_calls_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_calls.csv\n</code></pre> <p>Parameters description for <code>[PHONE_CALLS][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_CALLS</code> features from the <code>RAPIDS</code> provider <code>[CALL_TYPES]</code> The particular call_type that will be analyzed. The options for this parameter are incoming, outgoing or missed. <code>[FEATURES]</code> Features to be computed for <code>outgoing</code>, <code>incoming</code>, and <code>missed</code> calls. Note that the same features are available for both incoming and outgoing calls, while missed calls has its own set of features. See the tables below. <p>Features description for <code>[PHONE_CALLS][PROVIDERS][RAPIDS]</code> incoming and outgoing calls:</p> Feature Units Description count calls Number of calls of a particular <code>call_type</code> occurred during a particular <code>time_segment</code>. distinctcontacts contacts Number of distinct contacts that are associated with a particular <code>call_type</code> for a particular <code>time_segment</code> meanduration seconds The mean duration of all calls of a particular <code>call_type</code> during a particular <code>time_segment</code>. sumduration seconds The sum of the duration of all calls of a particular <code>call_type</code> during a particular <code>time_segment</code>. minduration seconds The duration of the shortest call of a particular <code>call_type</code> during a particular <code>time_segment</code>. maxduration seconds The duration of the longest call of a particular <code>call_type</code> during a particular <code>time_segment</code>. stdduration seconds The standard deviation of the duration of all the calls of a particular <code>call_type</code> during a particular <code>time_segment</code>. modeduration seconds The mode of the duration of all the calls of a particular <code>call_type</code> during a particular <code>time_segment</code>. entropyduration nats The estimate of the Shannon entropy for the the duration of all the calls of a particular <code>call_type</code> during a particular <code>time_segment</code>. timefirstcall minutes The time in minutes between 12:00am (midnight) and the first call of <code>call_type</code>. timelastcall minutes The time in minutes between 12:00am (midnight) and the last call of <code>call_type</code>. countmostfrequentcontact calls The number of calls of a particular <code>call_type</code> during a particular <code>time_segment</code> of the most frequent contact throughout the monitored period. <p>Features description for <code>[PHONE_CALLS][PROVIDERS][RAPIDS]</code> missed calls:</p> Feature Units Description count calls Number of <code>missed</code> calls that occurred during a particular <code>time_segment</code>. distinctcontacts contacts Number of distinct contacts that are associated with <code>missed</code> calls for a particular <code>time_segment</code> timefirstcall minutes The time in hours from 12:00am (Midnight) that the first <code>missed</code> call occurred. timelastcall minutes The time in hours from 12:00am (Midnight) that the last <code>missed</code> call occurred. countmostfrequentcontact calls The number of <code>missed</code> calls during a particular <code>time_segment</code> of the most frequent contact throughout the monitored period. <p>Assumptions/Observations</p> <ol> <li>Traces for iOS calls are unique even for the same contact calling a participant more than once which renders <code>countmostfrequentcontact</code> meaningless and <code>distinctcontacts</code> equal to the total number of traces. </li> <li><code>[CALL_TYPES]</code> and <code>[FEATURES]</code> keys in <code>config.yaml</code> need to match. For example, <code>[CALL_TYPES]</code> <code>outgoing</code> matches the <code>[FEATURES]</code> key <code>outgoing</code></li> <li>iOS calls data is transformed to match Android calls data format. See our algorithm</li> </ol>"},{"location":"features/phone-conversation/","title":"Phone Conversation","text":"<p>Sensor parameters description for <code>[PHONE_CONVERSATION]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE][ANDROID]</code> Database table where the conversation data from Android devices is stored (the AWARE client saves this data on different tables for Android and iOS) <code>[TABLE][IOS]</code> Database table where the conversation data from iOS devices is stored (the AWARE client saves this data on different tables for Android and iOS)"},{"location":"features/phone-conversation/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_conversation_raw.csv\n- data/raw/{pid}/phone_conversation_with_datetime.csv\n- data/raw/{pid}/phone_conversation_with_datetime_unified.csv\n- data/interim/{pid}/phone_conversation_features/phone_conversation_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_conversation.csv\n</code></pre> <p>Parameters description for <code>[PHONE_CONVERSATION][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_CONVERSATION</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[RECORDING_MINUTES]</code> Minutes the plugin was recording audio (default 1 min) <code>[PAUSED_MINUTES]</code> Minutes the plugin was NOT recording audio (default 3 min) <p>Features description for <code>[PHONE_CONVERSATION][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description minutessilence minutes Minutes labeled as silence minutesnoise minutes Minutes labeled as noise minutesvoice minutes Minutes labeled as voice minutesunknown minutes Minutes labeled as unknown sumconversationduration minutes Total duration of all conversations maxconversationduration minutes Longest duration of all conversations minconversationduration minutes Shortest duration of all conversations avgconversationduration minutes Average duration of all conversations sdconversationduration minutes Standard Deviation of the duration of all conversations timefirstconversation minutes Minutes since midnight when the first conversation for a time segment was detected timelastconversation minutes Minutes since midnight when the last conversation for a time segment was detected noisesumenergy L2-norm Sum of all energy values when inference is noise noiseavgenergy L2-norm Average of all energy values when inference is noise noisesdenergy L2-norm Standard Deviation of all energy values when inference is noise noiseminenergy L2-norm Minimum of all energy values when inference is noise noisemaxenergy L2-norm Maximum of all energy values when inference is noise voicesumenergy L2-norm Sum of all energy values when inference is voice voiceavgenergy L2-norm Average of all energy values when inference is voice voicesdenergy L2-norm Standard Deviation of all energy values when inference is voice voiceminenergy L2-norm Minimum of all energy values when inference is voice voicemaxenergy L2-norm Maximum of all energy values when inference is voice silencesensedfraction - Ratio between minutessilence and the sum of (minutessilence, minutesnoise, minutesvoice, minutesunknown) noisesensedfraction - Ratio between minutesnoise and the sum of (minutessilence, minutesnoise, minutesvoice, minutesunknown) voicesensedfraction - Ratio between minutesvoice and the sum of (minutessilence, minutesnoise, minutesvoice, minutesunknown) unknownsensedfraction - Ratio between minutesunknown and the sum of (minutessilence, minutesnoise, minutesvoice, minutesunknown) silenceexpectedfraction - Ration between minutessilence and the number of minutes that in  theory should have been sensed based on the record and pause cycle of  the plugin (1440 / recordingMinutes+pausedMinutes) noiseexpectedfraction - Ration between minutesnoise and the number of minutes that in theory  should have been sensed based on the record and pause cycle of the  plugin (1440 / recordingMinutes+pausedMinutes) voiceexpectedfraction - Ration between minutesvoice and the number of minutes that in theory  should have been sensed based on the record and pause cycle of the  plugin (1440 / recordingMinutes+pausedMinutes) unknownexpectedfraction - Ration between minutesunknown and the number of minutes that in  theory should have been sensed based on the record and pause cycle of  the plugin (1440 / recordingMinutes+pausedMinutes) <p>Assumptions/Observations</p> <ol> <li>The timestamp of conversation rows in iOS is in seconds so we convert it to milliseconds to match Android\u2019s format</li> </ol>"},{"location":"features/phone-data-yield/","title":"Phone Data Yield","text":"<p>This is a combinatorial sensor which means that we use the data from multiple sensors to extract data yield features. Data yield features can be used to remove rows (time segments) that do not contain enough data. You should decide what is your \u201cenough\u201d threshold depending on the type of sensors you collected (frequency vs event based, e.g. acceleroemter vs calls), the length of your study, and the rates of missing data that your analysis could handle.</p> <p>Why is data yield important?</p> <p>Imagine that you want to extract <code>PHONE_CALL</code> features on daily segments (<code>00:00</code> to <code>23:59</code>). Let\u2019s say that on day 1 the phone logged 10 calls and 23 hours of data from other sensors and on day 2 the phone logged 10 calls and only 2 hours of data from other sensors. It\u2019s more likely that other calls were placed on the 22 hours of data that you didn\u2019t log on day 2 than on the 1 hour of data you didn\u2019t log on day 1, and so including day 2 in your analysis could bias your results.</p> <p>Sensor parameters description for <code>[PHONE_DATA_YIELD]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[SENSORS]</code> One or more phone sensor config keys (e.g. <code>PHONE_MESSAGE</code>). The more keys you include the more accurately RAPIDS can approximate the time an smartphone was sensing data. The supported phone sensors you can include in this list are outlined below (do NOT include Fitbit sensors). <p>Supported phone sensors for <code>[PHONE_DATA_YIELD][SENSORS]</code></p> <pre><code>PHONE_ACCELEROMETER\nPHONE_ACTIVITY_RECOGNITION\nPHONE_APPLICATIONS_FOREGROUND\nPHONE_BATTERY\nPHONE_BLUETOOTH\nPHONE_CALLS\nPHONE_CONVERSATION\nPHONE_MESSAGES\nPHONE_LIGHT\nPHONE_LOCATIONS\nPHONE_SCREEN\nPHONE_WIFI_VISIBLE\nPHONE_WIFI_CONNECTED\n</code></pre>"},{"location":"features/phone-data-yield/#rapids-provider","title":"RAPIDS provider","text":"<p>Before explaining the data yield features, let\u2019s define the following relevant concepts:</p> <ul> <li>A valid minute is any 60 second window when any phone sensor logged at least 1 row of data</li> <li>A valid hour is any 60 minute window with at least X valid minutes. The X or threshold is given by <code>[MINUTE_RATIO_THRESHOLD_FOR_VALID_YIELDED_HOURS]</code></li> </ul> <p>The timestamps of all sensors are concatenated and then grouped per time segment. Minute and hour windows are created from the beginning of each time segment instance and these windows are marked as valid based on the definitions above. The duration of each time segment is taken into account to compute the features described below.</p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/{sensor}_raw.csv # one for every [PHONE_DATA_YIELD][SENSORS]\n- data/interim/{pid}/phone_yielded_timestamps.csv\n- data/interim/{pid}/phone_yielded_timestamps_with_datetime.csv\n- data/interim/{pid}/phone_data_yield_features/phone_data_yield_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_data_yield.csv\n</code></pre> <p>Parameters description for <code>[PHONE_DATA_YIELD][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_DATA_YIELD</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[MINUTE_RATIO_THRESHOLD_FOR_VALID_YIELDED_HOURS]</code> The proportion <code>[0.0 ,1.0]</code> of valid minutes in a 60-minute window necessary to flag that window as valid. <p>Features description for <code>[PHONE_DATA_YIELD][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description ratiovalidyieldedminutes rows The ratio between the number of valid minutes and the duration in minutes of a time segment. ratiovalidyieldedhours lux The ratio between the number of valid hours and the duration in hours of a time segment. If the time segment is shorter than 1 hour this feature will always be 1. <p>Assumptions/Observations</p> <ol> <li> <p>We recommend using <code>ratiovalidyieldedminutes</code> on time segments that are shorter than two or three hours and <code>ratiovalidyieldedhours</code> for longer segments. This is because relying on yielded minutes only can be misleading when a big chunk of those missing minutes are clustered together. </p> <p>For example, let\u2019s assume we are working with a 24-hour time segment that is missing 12 hours of data. Two extreme cases can occur: </p> <p><ol> <li>the 12 missing hours are from the beginning of the segment or </li> <li>30 minutes could be missing from every hour (24 * 30 minutes = 12 hours).</li> </ol></p> <p><code>ratiovalidyieldedminutes</code> would be 0.5 for both <code>a</code> and <code>b</code> (hinting the missing circumstances are similar). However, <code>ratiovalidyieldedhours</code> would be 0.5 for <code>a</code> and 1.0 for <code>b</code> if <code>[MINUTE_RATIO_THRESHOLD_FOR_VALID_YIELDED_HOURS]</code> is between [0.0 and 0.49] (hinting that the missing circumstances might be more favorable for <code>b</code>. In other words, sensed data for <code>b</code> is more evenly spread compared to <code>a</code>.</p> </li> </ol>"},{"location":"features/phone-light/","title":"Phone Light","text":"<p>Sensor parameters description for <code>[PHONE_LIGHT]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the light data is stored"},{"location":"features/phone-light/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_light_raw.csv\n- data/raw/{pid}/phone_light_with_datetime.csv\n- data/interim/{pid}/phone_light_features/phone_light_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_light.csv\n</code></pre> <p>Parameters description for <code>[PHONE_LIGHT][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_LIGHT</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_LIGHT][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description count rows Number light sensor rows recorded. maxlux lux The maximum ambient luminance. minlux lux The minimum ambient luminance. avglux lux The average ambient luminance. medianlux lux The median ambient luminance. stdlux lux The standard deviation of ambient luminance. <p>Assumptions/Observations</p> <p>NA</p>"},{"location":"features/phone-locations/","title":"Phone Locations","text":"<p>Sensor parameters description for <code>[PHONE_LOCATIONS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the location data is stored <code>[LOCATIONS_TO_USE]</code> Type of location data to use, one of <code>ALL</code>, <code>GPS</code> or <code>FUSED_RESAMPLED</code>. This filter is based on the <code>provider</code> column of the AWARE locations table, <code>ALL</code> includes every row, <code>GPS</code> only includes rows where provider is gps, and <code>FUSED_RESAMPLED</code> only includes rows where provider is fused after being resampled. <code>[FUSED_RESAMPLED_CONSECUTIVE_THRESHOLD]</code> if <code>FUSED_RESAMPLED</code> is used, the original fused data has to be resampled, a location row will be resampled to the next valid timestamp (see the Assumptions/Observations below) only if the time difference between them is less or equal than this threshold (in minutes). <code>[FUSED_RESAMPLED_TIME_SINCE_VALID_LOCATION]</code> if <code>FUSED_RESAMPLED</code> is used, the original fused data has to be resampled, a location row will be resampled at most for this long (in minutes) <p>Assumptions/Observations</p> <p>Types of location data to use AWARE Android and iOS clients can collect location coordinates through the phone's GPS, the network cellular towers around the phone or Google's fused location API. If you want to use only the GPS provider set <code>[LOCATIONS_TO_USE]</code> to <code>GPS</code>, if you want to use all providers (not recommended due to the difference in accuracy) set <code>[LOCATIONS_TO_USE]</code> to <code>ALL</code>, if your AWARE client was configured to use fused location only or want to focus only on this provider, set <code>[LOCATIONS_TO_USE]</code> to <code>RESAMPLE_FUSED</code>. <code>RESAMPLE_FUSED</code> takes the original fused location coordinates and replicates each pair forward in time as long as the phone was sensing data as indicated by the joined timestamps of <code>[PHONE_DATA_YIELD][SENSORS]</code>, this is done because Google's API only logs a new location coordinate pair when it is sufficiently different in time or space from the previous one.</p> <p>There are two parameters associated with resampling fused location. <code>FUSED_RESAMPLED_CONSECUTIVE_THRESHOLD</code> (in minutes, default 30) controls the maximum gap between any two coordinate pairs to replicate the last known pair (for example, participant A's phone did not collect data between 10.30am and 10:50am and between 11:05am and 11:40am, the last known coordinate pair will be replicated during the first period but not the second, in other words, we assume that we cannot longer guarantee the participant stayed at the last known location if the phone did not sense data for more than 30 minutes). <code>FUSED_RESAMPLED_TIME_SINCE_VALID_LOCATION</code> (in minutes, default 720 or 12 hours) stops the last known fused location from being replicated longer that this threshold even if the phone was sensing data continuously (for example, participant A went home at 9pm and their phone was sensing data without gaps until 11am the next morning, the last known location will only be replicated until 9am). If you have suggestions to modify or improve this resampling, let us know.</p>"},{"location":"features/phone-locations/#barnett-provider","title":"BARNETT provider","text":"<p>These features are based on the original open-source implementation by Barnett et al and some features created by Canzian et al.</p> <p>Available time segments and platforms</p> <ul> <li>Available only for segments that start at 00:00:00 and end at 23:59:59 of the same day (daily segments)</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_locations_raw.csv\n- data/interim/{pid}/phone_locations_processed.csv\n- data/interim/{pid}/phone_locations_processed_with_datetime.csv\n- data/interim/{pid}/phone_locations_features/phone_locations_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_locations.csv\n</code></pre> <p>Parameters description for <code>[PHONE_LOCATIONS][PROVIDERS][BARNETT]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_LOCATIONS</code> features from the <code>BARNETT</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[ACCURACY_LIMIT]</code> An integer in meters, any location rows with an accuracy higher than this will be dropped. This number means there\u2019s a 68% probability the true location is within this radius <code>[TIMEZONE]</code> Timezone where the location data was collected. By default points to the one defined in the Configuration <code>[MINUTES_DATA_USED]</code> Set to <code>True</code> to include an extra column in the final location feature file containing the number of minutes used to compute the features on each time segment. Use this for quality control purposes, the more data minutes exist for a period, the more reliable its features should be. For fused location, a single minute can contain more than one coordinate pair if the participant is moving fast enough. <p>Features description for <code>[PHONE_LOCATIONS][PROVIDERS][BARNETT]</code> adapted from Beiwe Summary Statistics:</p> Feature Units Description hometime minutes Time at home. Time spent at home in minutes. Home is the most visited significant location between 8 pm and 8 am including any pauses within a 200-meter radius. disttravelled meters Total distance travelled over a day (flights). rog meters The Radius of Gyration (rog) is a measure in meters of the area covered by a person over a day. A centroid is calculated for all the places (pauses) visited during a day and a weighted distance between all the places and that centroid is computed. The weights are proportional to the time spent in each place. maxdiam meters The maximum diameter is the largest distance between any two pauses. maxhomedist meters The maximum distance from home in meters. siglocsvisited locations The number of significant locations visited during the day. Significant locations are computed using k-means clustering over pauses found in the whole monitoring period. The number of clusters is found iterating k from 1 to 200 stopping until the centroids of two significant locations are within 400 meters of one another. avgflightlen meters Mean length of all flights. stdflightlen meters Standard deviation of the length of all flights. avgflightdur seconds Mean duration of all flights. stdflightdur seconds The standard deviation of the duration of all flights. probpause - The fraction of a day spent in a pause (as opposed to a flight) siglocentropy nats Shannon\u2019s entropy measurement based on the proportion of time spent at each significant location visited during a day. circdnrtn - A continuous metric quantifying a person\u2019s circadian routine that can take any value between 0 and 1, where 0 represents a daily routine completely different from any other sensed days and 1 a routine the same as every other sensed day. wkenddayrtn - Same as circdnrtn but computed separately for weekends and weekdays. <p>Assumptions/Observations</p> <p>Barnett's et al features These features are based on a Pause-Flight model. A pause is defined as a mobiity trace (location pings) within a certain duration and distance (by default 300 seconds and 60 meters). A flight is any mobility trace between two pauses. Data is resampled and imputed before the features are computed. See Barnett et al for more information. In RAPIDS we only expose two parameters for these features (timezone and accuracy limit). You can change other parameters in <code>src/features/phone_locations/barnett/library/MobilityFeatures.R</code>.</p> <p>Significant Locations Significant locations are determined using K-means clustering on pauses longer than 10 minutes. The number of clusters (K) is increased until no two clusters are within 400 meters from each other. After this, pauses within a certain range of a cluster (200 meters by default) will count as a visit to that significant location. This description was adapted from the Supplementary Materials of Barnett et al.</p> <p>The Circadian Calculation For a detailed description of how this is calculated, see Canzian et al.</p>"},{"location":"features/phone-locations/#doryab-provider","title":"DORYAB provider","text":"<p>These features are based on the original implementation by Doryab et al..</p> <p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_locations_raw.csv\n- data/interim/{pid}/phone_locations_processed.csv\n- data/interim/{pid}/phone_locations_processed_with_datetime.csv\n- data/interim/{pid}/phone_locations_features/phone_locations_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_locations.csv\n</code></pre> <p>Parameters description for <code>[PHONE_LOCATIONS][PROVIDERS][BARNETT]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_LOCATIONS</code> features from the <code>BARNETT</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[DBSCAN_EPS]</code> The maximum distance in meters between two samples for one to be considered as in the neighborhood of the other. This is not a maximum bound on the distances of points within a cluster. This is the most important DBSCAN parameter to choose appropriately for your data set and distance function. <code>[DBSCAN_MINSAMPLES]</code> The number of samples (or total weight) in a neighborhood for a point to be considered as a core point of a cluster. This includes the point itself. <code>[THRESHOLD_STATIC]</code> It is the threshold value in km/hr which labels a row as Static or Moving. <code>[MAXIMUM_GAP_ALLOWED]</code> The maximum gap (in seconds) allowed between any two consecutive rows for them to be considered part of the same displacement. If this threshold is too high, it can throw speed and distance calculations off for periods when the the phone was not sensing. <code>[MINUTES_DATA_USED]</code> Set to <code>True</code> to include an extra column in the final location feature file containing the number of minutes used to compute the features on each time segment. Use this for quality control purposes, the more data minutes exist for a period, the more reliable its features should be. For fused location, a single minute can contain more than one coordinate pair if the participant is moving fast enough. <code>[SAMPLING_FREQUENCY]</code> Expected time difference between any two location rows in minutes. If set to <code>0</code>, the sampling frequency will be inferred automatically as the median of all the differences between any two consecutive row timestamps (recommended if you are using <code>FUSED_RESAMPLED</code> data). This parameter impacts all the time calculations. <p>Features description for <code>[PHONE_LOCATIONS][PROVIDERS][BARNETT]</code>:</p> Feature Units Description locationvariance \\(meters^2\\) The sum of the variances of the latitude and longitude columns. loglocationvariance - Log of the sum of the variances of the latitude and longitude columns. totaldistance meters Total distance travelled in a time segment using the haversine formula. averagespeed km/hr Average speed in a time segment considering only the instances labeled as Moving. varspeed km/hr Speed variance in a time segment considering only the instances labeled as Moving. circadianmovement - \"It encodes the extent to which a person\u2019s location patterns follow a 24-hour circadian cycle.\" Doryab et al.. numberofsignificantplaces places Number of significant locations visited. It is calculated using the DBSCAN clustering algorithm which takes in EPS and MIN_SAMPLES as parameters to identify clusters. Each cluster is a significant place. numberlocationtransitions transitions Number of movements between any two clusters in a time segment. radiusgyration meters Quantifies the area covered by a participant timeattop1location minutes Time spent at the most significant location. timeattop2location minutes Time spent at the 2<sup>nd</sup> most significant location. timeattop3location minutes Time spent at the 3<sup>rd</sup> most significant location. movingtostaticratio - Ratio between the number of rows labeled Moving versus Static outlierstimepercent - Ratio between the number of rows that belong to non-significant clusters divided by the total number of rows in a time segment. maxlengthstayatclusters minutes Maximum time spent in a cluster (significant location). minlengthstayatclusters minutes Minimum time spent in a cluster (significant location). meanlengthstayatclusters minutes Average time spent in a cluster (significant location). stdlengthstayatclusters minutes Standard deviation of time spent in a cluster (significant location). locationentropy nats Shannon Entropy computed over the row count of each cluster (significant location), it will be higher the more rows belong to a cluster (i.e. the more time a participant spent at a significant location). normalizedlocationentropy nats Shannon Entropy computed over the row count of each cluster (significant location) divided by the number of clusters, it will be higher the more rows belong to a cluster (i.e. the more time a participant spent at a significant location). <p>Assumptions/Observations</p> <p>Significant Locations Identified Significant locations are determined using DBSCAN clustering on locations that a patient visit over the course of the period of data collection.</p> <p>The Circadian Calculation For a detailed description of how this is calculated, see Canzian et al.</p>"},{"location":"features/phone-messages/","title":"Phone Messages","text":"<p>Sensor parameters description for <code>[PHONE_MESSAGES]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the messages data is stored"},{"location":"features/phone-messages/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_messages_raw.csv\n- data/raw/{pid}/phone_messages_with_datetime.csv\n- data/interim/{pid}/phone_messages_features/phone_messages_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_messages.csv\n</code></pre> <p>Parameters description for <code>[PHONE_MESSAGES][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_MESSAGES</code> features from the <code>RAPIDS</code> provider <code>[MESSAGES_TYPES]</code> The <code>messages_type</code> that will be analyzed. The options for this parameter are <code>received</code> or <code>sent</code>. <code>[FEATURES]</code> Features to be computed, see table below for <code>[MESSAGES_TYPES]</code> <code>received</code> and <code>sent</code> <p>Features description for <code>[PHONE_MESSAGES][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description count messages Number of messages of type <code>messages_type</code> that occurred during a particular <code>time_segment</code>. distinctcontacts contacts Number of distinct contacts that are associated with a particular <code>messages_type</code> during a particular <code>time_segment</code>. timefirstmessages minutes Number of minutes between 12:00am (midnight) and the first <code>message</code> of a particular <code>messages_type</code> during a particular <code>time_segment</code>. timelastmessages minutes Number of minutes between 12:00am (midnight) and the last <code>message</code> of a particular <code>messages_type</code> during a particular <code>time_segment</code>. countmostfrequentcontact messages Number of messages from the contact with the most messages of <code>messages_type</code> during a <code>time_segment</code> throughout the whole dataset of each participant. <p>Assumptions/Observations</p> <ol> <li><code>[MESSAGES_TYPES]</code> and <code>[FEATURES]</code> keys in <code>config.yaml</code> need to match. For example, <code>[MESSAGES_TYPES]</code> <code>sent</code> matches the <code>[FEATURES]</code> key <code>sent</code></li> </ol>"},{"location":"features/phone-screen/","title":"Phone Screen","text":"<p>Sensor parameters description for <code>[PHONE_SCREEN]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the screen data is stored"},{"location":"features/phone-screen/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_screen_raw.csv\n- data/raw/{pid}/phone_screen_with_datetime.csv\n- data/raw/{pid}/phone_screen_with_datetime_unified.csv\n- data/interim/{pid}/phone_screen_episodes.csv\n- data/interim/{pid}/phone_screen_episodes_resampled.csv\n- data/interim/{pid}/phone_screen_episodes_resampled_with_datetime.csv\n- data/interim/{pid}/phone_screen_features/phone_screen_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_screen.csv\n</code></pre> <p>Parameters description for <code>[PHONE_SCREEN][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_SCREEN</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <code>[REFERENCE_HOUR_FIRST_USE]</code> The reference point from which <code>firstuseafter</code> is to be computed, default is midnight <code>[IGNORE_EPISODES_SHORTER_THAN]</code> Ignore episodes that are shorter than this threshold (minutes). Set to 0 to disable this filter. <code>[IGNORE_EPISODES_LONGER_THAN]</code> Ignore episodes that are longer than this threshold (minutes). Set to 0 to disable this filter. <code>[EPISODE_TYPES]</code> Currently we only support <code>unlock</code> episodes (from when the phone is unlocked until the screen is off) <p>Features description for <code>[PHONE_SCREEN][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description sumduration minutes Total duration of all unlock episodes. maxduration minutes Longest duration of any unlock episode. minduration minutes Shortest duration of any unlock episode. avgduration minutes Average duration of all unlock episodes. stdduration minutes Standard deviation duration of all unlock episodes. countepisode episodes Number of all unlock episodes <p>|firstuseafter             |minutes           |Minutes until the first unlock episode.</p> <p>Assumptions/Observations</p> <ol> <li> <p>In Android, <code>lock</code> events can happen right after an <code>off</code> event, after a few seconds of an <code>off</code> event, or never happen depending on the phone's settings, therefore, an <code>unlock</code> episode is defined as the time between an <code>unlock</code> and a <code>off</code> event. In iOS, <code>on</code> and <code>off</code> events do not exist, so an <code>unlock</code> episode is defined as the time between an <code>unlock</code> and a <code>lock</code> event.</p> </li> <li> <p>Events in iOS are recorded reliably albeit some duplicated <code>lock</code> events within milliseconds from each other, so we only keep consecutive unlock/lock pairs. In Android you cand find multiple consecutive <code>unlock</code> or <code>lock</code> events, so we only keep consecutive unlock/off pairs. In our experiments these cases are less than 10% of the screen events collected and this happens because <code>ACTION_SCREEN_OFF</code> and <code>ACTION_SCREEN_ON</code> are <code>sent when the device becomes non-interactive which may have nothing to do with the screen turning off</code>. In addition to unlock/off episodes, in Android it is possible to measure the time spent on the lock screen before an <code>unlock</code> event as well as the total screen time (i.e. <code>ON</code> to <code>OFF</code>) but these are not implemented at the moment.</p> </li> <li> <p>We transform iOS screen events to match Android\u2019s format, we replace <code>lock</code> episodes with <code>off</code> episodes (2 with 0) in iOS. However, as mentioned above this is still computing <code>unlock</code> to <code>lock</code> episodes.</p> </li> </ol>"},{"location":"features/phone-wifi-connected/","title":"Phone WiFi Connected","text":"<p>Sensor parameters description for <code>[PHONE_WIFI_CONNECTED]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the wifi (connected) data is stored"},{"location":"features/phone-wifi-connected/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android and iOS</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_wifi_connected_raw.csv\n- data/raw/{pid}/phone_wifi_connected_with_datetime.csv\n- data/interim/{pid}/phone_wifi_connected_features/phone_wifi_connected_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_wifi_connected.csv\n</code></pre> <p>Parameters description for <code>[PHONE_WIFI_CONNECTED][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_WIFI_CONNECTED</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_WIFI_CONNECTED][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description countscans devices Number of scanned WiFi access points connected during a time_segment, an access point can be detected multiple times over time and these appearances are counted separately uniquedevices devices Number of unique access point during a time_segment as identified by their hardware address countscansmostuniquedevice scans Number of scans of the most scanned access point during a time_segment across the whole monitoring period <p>Assumptions/Observations</p> <ol> <li>A connected WiFI access point is one that a phone was connected to.</li> <li>By default AWARE stores this data in the <code>sensor_wifi</code> table.</li> </ol>"},{"location":"features/phone-wifi-visible/","title":"Phone WiFi Visible","text":"<p>Sensor parameters description for <code>[PHONE_WIFI_VISIBLE]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[TABLE]</code> Database table where the wifi (visible) data is stored"},{"location":"features/phone-wifi-visible/#rapids-provider","title":"RAPIDS provider","text":"<p>Available time segments and platforms</p> <ul> <li>Available for all time segments</li> <li>Available for Android only</li> </ul> <p>File Sequence</p> <pre><code>- data/raw/{pid}/phone_wifi_visible_raw.csv\n- data/raw/{pid}/phone_wifi_visible_with_datetime.csv\n- data/interim/{pid}/phone_wifi_visible_features/phone_wifi_visible_{language}_{provider_key}.csv\n- data/processed/features/{pid}/phone_wifi_visible.csv\n</code></pre> <p>Parameters description for <code>[PHONE_WIFI_VISIBLE][PROVIDERS][RAPIDS]</code>:</p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[COMPUTE]</code> Set to <code>True</code> to extract <code>PHONE_WIFI_VISIBLE</code> features from the <code>RAPIDS</code> provider <code>[FEATURES]</code> Features to be computed, see table below <p>Features description for <code>[PHONE_WIFI_VISIBLE][PROVIDERS][RAPIDS]</code>:</p> Feature Units Description countscans devices Number of scanned WiFi access points visible during a time_segment, an access point can be detected multiple times over time and these appearances are counted separately uniquedevices devices Number of unique access point during a time_segment as identified by their hardware address countscansmostuniquedevice scans Number of scans of the most scanned access point during a time_segment across the whole monitoring period <p>Assumptions/Observations</p> <ol> <li>A visible WiFI access point is one that a phone sensed around itself but that it was not connected to. Due to API restrictions, this sensor is not available on iOS.</li> <li>By default AWARE stores this data in the <code>wifi</code> table.</li> </ol>"},{"location":"setup/configuration/","title":"Configuration","text":"<p>You need to follow these steps to configure your RAPIDS deployment before you can extract behavioral features</p> <ol> <li>Add your database credentials</li> <li>Choose the timezone of your study</li> <li>Create your participants files</li> <li>Select what time segments you want to extract features on</li> <li>Modify your device data source configuration</li> <li>Select what sensors and features you want to process</li> </ol> <p>When you are done with this configuration, go to executing RAPIDS.</p> <p>Hint</p> <p>Every time you see <code>config[\"KEY\"]</code> or <code>[KEY]</code> in these docs we are referring to the corresponding key in the <code>config.yaml</code> file.</p>"},{"location":"setup/configuration/#database-credentials","title":"Database credentials","text":"<ol> <li>Create an empty file called <code>.env</code> in your RAPIDS root directory</li> <li>Add the following lines and replace your database-specific  credentials (user, password, host, and database):</li> </ol> <pre><code>[MY_GROUP]\nuser=MY_USER\npassword=MY_PASSWORD\nhost=MY_HOST\nport=3306\ndatabase=MY_DATABASE\n</code></pre> <p>Warning</p> <p>The label <code>MY_GROUP</code> is arbitrary but it has to match the following <code>config.yaml</code> key:</p> <pre><code>DATABASE_GROUP: &amp;database_group\n  MY_GROUP\n</code></pre> <p>Note</p> <p>You can ignore this step if you are only processing Fitbit data in CSV files.</p>"},{"location":"setup/configuration/#timezone-of-your-study","title":"Timezone of your study","text":""},{"location":"setup/configuration/#single-timezone","title":"Single timezone","text":"<p>If your study only happened in a single time zone, select the appropriate code form this list and change the following config key. Double check your timezone code pick, for example US Eastern Time is <code>America/New_York</code> not <code>EST</code></p> <pre><code>TIMEZONE: &amp;timezone\n  America/New_York\n</code></pre>"},{"location":"setup/configuration/#multiple-timezones","title":"Multiple timezones","text":"<p>Support coming soon.</p>"},{"location":"setup/configuration/#participant-files","title":"Participant files","text":"<p>Participant files link together multiple devices (smartphones and wearables) to specific participants and identify them throughout RAPIDS. You can create these files manually or automatically. Participant files are stored in <code>data/external/participant_files/pxx.yaml</code> and follow a unified structure.</p> <p>Note</p> <p>The list <code>PIDS</code> in <code>config.yaml</code> needs to have the participant file names of the people you want to process. For example, if you created <code>p01.yaml</code>, <code>p02.yaml</code> and <code>p03.yaml</code> files in <code>/data/external/participant_files/</code>, then <code>PIDS</code> should be: <pre><code>PIDS: [p01, p02, p03] \n</code></pre></p> <p>Tip</p> <p>Attribute values of the <code>[PHONE]</code> and <code>[FITBIT]</code> sections in every participant file are optional which allows you to analyze data from participants that only carried smartphones, only Fitbit devices, or both.</p> Optional: Migrating participants files with the old format <p>If you were using the pre-release version of RAPIDS with participant files in plain text (as opposed to yaml), you can run the following command and your old files will be converted into yaml files stored in <code>data/external/participant_files/</code></p> <pre><code>python tools/update_format_participant_files.py\n</code></pre>"},{"location":"setup/configuration/#structure-of-participants-files","title":"Structure of participants files","text":"<p>Example of the structure of a participant file</p> <p>In this example, the participant used an android phone, an ios phone, and a fitbit device throughout the study between Apr 23<sup>rd</sup> 2020 and Oct 28<sup>th</sup> 2020</p> <pre><code>PHONE:\n  DEVICE_IDS: [a748ee1a-1d0b-4ae9-9074-279a2b6ba524, dsadas-2324-fgsf-sdwr-gdfgs4rfsdf43]\n  PLATFORMS: [android,ios]\n  LABEL: test01\n  START_DATE: 2020-04-23\n  END_DATE: 2020-10-28\nFITBIT:\n  DEVICE_IDS: [fitbit1]\n  LABEL: test01\n  START_DATE: 2020-04-23\n  END_DATE: 2020-10-28\n</code></pre> <p>For <code>[PHONE]</code></p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[DEVICE_IDS]</code> An array of the strings that uniquely identify each smartphone, you can have more than one for when participants changed phones in the middle of the study, in this case, data from all their devices will be joined and relabeled with the last 1 on this list. <code>[PLATFORMS]</code> An array that specifies the OS of each smartphone in  <code>[DEVICE_IDS]</code> , use a combination of  <code>android</code>  or  <code>ios</code>  (we support participants that changed platforms in the middle of your study!). If you have an  <code>aware_device</code>  table in your database you can set  <code>[PLATFORMS]: [multiple]</code>  and RAPIDS will infer them automatically. <code>[LABEL]</code> A string that is used in reports and visualizations. <code>[START_DATE]</code> A string with format  <code>YYY-MM-DD</code> . Only data collected  after  this date will be included in the analysis <code>[END_DATE]</code> A string with format  <code>YYY-MM-DD</code> . Only data collected  before  this date will be included in the analysis <p>For <code>[FITBIT]</code></p> Key\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>[DEVICE_IDS]</code> An array of the strings that uniquely identify each Fitbit, you can have more than one in case the participant changed devices in the middle of the study, in this case, data from all devices will be joined and relabeled with the last  <code>device_id</code>  on this list. <code>[LABEL]</code> A string that is used in reports and visualizations. <code>[START_DATE]</code> A string with format  <code>YYY-MM-DD</code> . Only data collected  after  this date will be included in the analysis <code>[END_DATE]</code> A string with format  <code>YYY-MM-DD</code> . Only data collected  before  this date will be included in the analysis"},{"location":"setup/configuration/#automatic-creation-of-participant-files","title":"Automatic creation of participant files","text":"<p>You have two options a) use the <code>aware_device</code> table in your database or b) use a CSV file. In either case, in your <code>config.yaml</code>, set <code>[PHONE_SECTION][ADD]</code> or <code>[FITBIT_SECTION][ADD]</code> to <code>TRUE</code> depending on what devices you used in your study. Set <code>[DEVICE_ID_COLUMN]</code> to the name of the column that uniquely identifies each device and include any device ids you want to ignore in <code>[IGNORED_DEVICE_IDS]</code>.</p> aware_device table <p>Set the following keys in your <code>config.yaml</code></p> <pre><code>CREATE_PARTICIPANT_FILES:\n  SOURCE:\n    TYPE: AWARE_DEVICE_TABLE\n    DATABASE_GROUP: *database_group\n    CSV_FILE_PATH: \"\"\n    TIMEZONE: *timezone\n  PHONE_SECTION:\n    ADD: TRUE # or FALSE\n    DEVICE_ID_COLUMN: device_id # column name\n    IGNORED_DEVICE_IDS: []\n  FITBIT_SECTION:\n    ADD: TRUE # or FALSE\n    DEVICE_ID_COLUMN: fitbit_id # column name\n    IGNORED_DEVICE_IDS: []\n</code></pre> <p>Then run </p> <pre><code>snakemake -j1 create_participants_files\n</code></pre> CSV file <p>Set the following keys in your <code>config.yaml</code>. </p> <p><pre><code>CREATE_PARTICIPANT_FILES:\n  SOURCE:\n    TYPE: CSV_FILE\n    DATABASE_GROUP: \"\"\n    CSV_FILE_PATH: \"your_path/to_your.csv\"\n    TIMEZONE: *timezone\n  PHONE_SECTION:\n    ADD: TRUE # or FALSE\n    DEVICE_ID_COLUMN: device_id # column name\n    IGNORED_DEVICE_IDS: []\n  FITBIT_SECTION:\n    ADD: TRUE # or FALSE\n    DEVICE_ID_COLUMN: fitbit_id # column name\n    IGNORED_DEVICE_IDS: []\n</code></pre> Your CSV file (<code>[SOURCE][CSV_FILE_PATH]</code>) should have the following columns but you can omit any values you don\u2019t have on each column:</p> Column Description phone device id The name of this column has to match <code>[PHONE_SECTION][DEVICE_ID_COLUMN]</code>. Separate multiple ids with <code>;</code> fitbit device id The name of this column has to match <code>[FITBIT_SECTION][DEVICE_ID_COLUMN]</code>. Separate multiple ids with <code>;</code> pid Unique identifiers with the format pXXX (your participant files will be named with this string platform Use <code>android</code>, <code>ios</code> or <code>multiple</code> as explained above, separate values with <code>;</code> label A human readable string that is used in reports and visualizations. start_date A string with format <code>YYY-MM-DD</code>. end_date A string with format <code>YYY-MM-DD</code>. <p>Example</p> <pre><code>device_id,pid,label,platform,start_date,end_date,fitbit_id\na748ee1a-1d0b-4ae9-9074-279a2b6ba524;dsadas-2324-fgsf-sdwr-gdfgs4rfsdf43,p01,julio,android;ios,2020-01-01,2021-01-01,fitbit1\n4c4cf7a1-0340-44bc-be0f-d5053bf7390c,p02,meng,ios,2021-01-01,2022-01-01,fitbit2\n</code></pre> <p>Then run </p> <pre><code>snakemake -j1 create_participants_files\n</code></pre>"},{"location":"setup/configuration/#time-segments","title":"Time Segments","text":"<p>Time segments (or epochs) are the time windows on which you want to extract behavioral features. For example, you might want to process data on every day, every morning, or only during weekends. RAPIDS offers three categories of time segments that are flexible enough to cover most use cases: frequency (short time windows every day), periodic (arbitrary time windows on any day), and event (arbitrary time windows around events of interest). See also our examples.</p> Frequency Segments <p>These segments are computed on every day and all have the same duration (for example 30 minutes). Set the following keys in your <code>config.yaml</code></p> <pre><code>TIME_SEGMENTS: &amp;time_segments\n  TYPE: FREQUENCY\n  FILE: \"data/external/your_frequency_segments.csv\"\n  INCLUDE_PAST_PERIODIC_SEGMENTS: FALSE\n</code></pre> <p>The file pointed by <code>[TIME_SEGMENTS][FILE]</code> should have the following format and can only have 1 row.</p> Column Description label A string that is used as a prefix in the name of your time segments length An integer representing the duration of your time segments in minutes <p>Example</p> <pre><code>label,length\nthirtyminutes,30\n</code></pre> <p>This configuration will compute 48 time segments for every day when any data from any participant was sensed. For example:</p> <pre><code>start_time,length,label\n00:00,30,thirtyminutes0000\n00:30,30,thirtyminutes0001\n01:00,30,thirtyminutes0002\n01:30,30,thirtyminutes0003\n...\n</code></pre> Periodic Segments <p>These segments can be computed every day, or on specific days of the week, month, quarter, and year. Their minimum duration is 1 minute but they can be as long as you want. Set the following keys in your <code>config.yaml</code>.</p> <pre><code>TIME_SEGMENTS: &amp;time_segments\n  TYPE: PERIODIC\n  FILE: \"data/external/your_periodic_segments.csv\"\n  INCLUDE_PAST_PERIODIC_SEGMENTS: FALSE # or TRUE\n</code></pre> <p>If <code>[INCLUDE_PAST_PERIODIC_SEGMENTS]</code> is set to <code>TRUE</code>, RAPIDS will consider instances of your segments back enough in the past as to include the first row of data of each participant. For example, if the first row of data from a participant happened on Saturday March 7<sup>th</sup> 2020 and the requested segment duration is 7 days starting on every Sunday, the first segment to be considered would start on Sunday March 1<sup>st</sup> if <code>[INCLUDE_PAST_PERIODIC_SEGMENTS]</code> is <code>TRUE</code> or on Sunday March 8<sup>th</sup> if <code>FALSE</code>.</p> <p>The file pointed by <code>[TIME_SEGMENTS][FILE]</code> should have the following format and can have multiple rows.</p> Column Description label A string that is used as a prefix in the name of your time segments. It has to be unique between rows start_time A string with format <code>HH:MM:SS</code> representing the starting time of this segment on any day length A string representing the length of this segment.It can have one or more of the following strings <code>XXD XXH XXM XXS</code> to represent days, hours, minutes and seconds. For example <code>7D 23H 59M 59S</code> repeats_on One of the follow options <code>every_day</code>, <code>wday</code>, <code>qday</code>, <code>mday</code>, and <code>yday</code>. The last four represent a week, quarter, month and year day repeats_value An integer complementing <code>repeats_on</code>. If you set <code>repeats_on</code> to <code>every_day</code> set this to <code>0</code>, otherwise <code>1-7</code> represent a <code>wday</code> starting from Mondays, <code>1-31</code> represent a <code>mday</code>, <code>1-91</code> represent a <code>qday</code>, and <code>1-366</code> represent a <code>yday</code> <p>Example</p> <pre><code>label,start_time,length,repeats_on,repeats_value\ndaily,00:00:00,23H 59M 59S,every_day,0\nmorning,06:00:00,5H 59M 59S,every_day,0\nafternoon,12:00:00,5H 59M 59S,every_day,0\nevening,18:00:00,5H 59M 59S,every_day,0\nnight,00:00:00,5H 59M 59S,every_day,0\n</code></pre> <p>This configuration will create five segments instances (<code>daily</code>, <code>morning</code>, <code>afternoon</code>, <code>evening</code>, <code>night</code>) on any given day (<code>every_day</code> set to 0). The <code>daily</code> segment will start at midnight and will last <code>23:59:59</code>, the other four segments will start at 6am, 12pm, 6pm, and 12am respectively and last for <code>05:59:59</code>. </p> Event segments <p>These segments can be computed before or after an event of interest (defined as any UNIX timestamp). Their minimum duration is 1 minute but they can be as long as you want. The start of each segment can be shifted backwards or forwards from the specified timestamp. Set the following keys in your <code>config.yaml</code>.</p> <pre><code>TIME_SEGMENTS: &amp;time_segments\n  TYPE: EVENT\n  FILE: \"data/external/your_event_segments.csv\"\n  INCLUDE_PAST_PERIODIC_SEGMENTS: FALSE # or TRUE\n</code></pre> <p>The file pointed by <code>[TIME_SEGMENTS][FILE]</code> should have the following format and can have multiple rows.</p> Column Description label A string that is used as a prefix in the name of your time segments. If labels are unique, every segment is independent; if two or more segments have the same label, their data will be grouped when computing auxiliary data for features like the <code>most frequent contact</code> for calls (the most frequent contact will be computed across all these segments). There cannot be two overlaping event segments with the same label (RAPIDS will throw an error) event_timestamp A UNIX timestamp that represents the moment an event of interest happened (clinical relapse, survey, readmission, etc.). The corresponding time segment will be computed around this moment using <code>length</code>, <code>shift</code>, and <code>shift_direction</code> length A string representing the length of this segment. It can have one or more of the following keys <code>XXD XXH XXM XXS</code> to represent a number of days, hours, minutes, and seconds. For example <code>7D 23H 59M 59S</code> shift A string representing the time shift from <code>event_timestamp</code>. It can have one or more of the following keys <code>XXD XXH XXM XXS</code> to represent a number of days, hours, minutes and seconds. For example <code>7D 23H 59M 59S</code>. Use this value to  change the start of a segment with respect to its <code>event_timestamp</code>. For example, set this variable to <code>1H</code> to create a segment that starts 1 hour from an event of interest (<code>shift_direction</code> determines if it\u2019s before or after). shift_direction An integer representing whether the <code>shift</code> is before (<code>-1</code>) or after (<code>1</code>) an <code>event_timestamp</code> device_id The device id (smartphone or fitbit) to whom this segment belongs to. You have to create a line in this event segment file for each event of a participant that you want to analyse. If you have participants with multiple device ids you can choose any of them <p>Example</p> <pre><code>label,event_timestamp,length,shift,shift_direction,device_id\nstress1,1587661220000,1H,5M,1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nstress2,1587747620000,4H,4H,-1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nstress3,1587906020000,3H,5M,1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nstress4,1584291600000,7H,4H,-1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nstress5,1588172420000,9H,5M,-1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nmood,1587661220000,1H,0,0,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nmood,1587747620000,1D,0,0,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nmood,1587906020000,7D,0,0,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\n</code></pre> <p>This example will create eight segments for a single participant (<code>a748ee1a...</code>), five independent <code>stressX</code> segments with various lengths (1,4,3,7, and 9 hours). Segments <code>stress1</code>, <code>stress3</code>, and <code>stress5</code> are shifted forwards by 5 minutes and <code>stress2</code> and <code>stress4</code> are shifted backwards by 4 hours (that is, if the <code>stress4</code> event happened on March 15<sup>th</sup> at 1pm EST (<code>1584291600000</code>), the time segment will start on that day at 9am and end at 4pm). </p> <p>The three <code>mood</code> segments are 1 hour, 1 day and 7 days long and have no shift. In addition, these <code>mood</code> segments are grouped together, meaning that although RAPIDS will compute features on each one of them, some necessary information to compute a few of such features will be extracted from all three segments, for example the phone contact that called a participant the most or the location clusters visited by a participant.</p>"},{"location":"setup/configuration/#segment-examples","title":"Segment Examples","text":"5-minutes <p>Use the following <code>Frequency</code> segment file to create 288 (12 * 60 * 24) 5-minute segments starting from midnight of every day in your study <pre><code>label,length\nfiveminutes,5\n</code></pre></p> Daily <p>Use the following <code>Periodic</code> segment file to create daily segments starting from midnight of every day in your study <pre><code>label,start_time,length,repeats_on,repeats_value\ndaily,00:00:00,23H 59M 59S,every_day,0\n</code></pre></p> Morning <p>Use the following <code>Periodic</code> segment file to create morning segments starting at 06:00:00 and ending at 11:59:59 of every day in your study <pre><code>label,start_time,length,repeats_on,repeats_value\nmorning,06:00:00,5H 59M 59S,every_day,0\n</code></pre></p> Overnight <p>Use the following <code>Periodic</code> segment file to create overnight segments starting at 20:00:00 and ending at 07:59:59 (next day) of every day in your study <pre><code>label,start_time,length,repeats_on,repeats_value\nmorning,20:00:00,11H 59M 59S,every_day,0\n</code></pre></p> Weekly <p>Use the following <code>Periodic</code> segment file to create non-overlapping weekly segments starting at midnight of every Monday in your study <pre><code>label,start_time,length,repeats_on,repeats_value\nweekly,00:00:00,6D 23H 59M 59S,wday,1\n</code></pre> Use the following <code>Periodic</code> segment file to create overlapping weekly segments starting at midnight of every day in your study <pre><code>label,start_time,length,repeats_on,repeats_value\nweekly,00:00:00,6D 23H 59M 59S,every_day,0\n</code></pre></p> Week-ends <p>Use the following <code>Periodic</code> segment file to create week-end segments starting at midnight of every Saturday in your study <pre><code>label,start_time,length,repeats_on,repeats_value\nweekend,00:00:00,1D 23H 59M 59S,wday,6\n</code></pre></p> Around surveys <p>Use the following <code>Event</code> segment file to create two 2-hour segments that start 1 hour before surveys answered by 3 participants <pre><code>label,event_timestamp,length,shift,shift_direction,device_id\nsurvey1,1587661220000,2H,1H,-1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nsurvey2,1587747620000,2H,1H,-1,a748ee1a-1d0b-4ae9-9074-279a2b6ba524\nsurvey1,1587906020000,2H,1H,-1,rqtertsd-43ff-34fr-3eeg-efe4fergregr\nsurvey2,1584291600000,2H,1H,-1,rqtertsd-43ff-34fr-3eeg-efe4fergregr\nsurvey1,1588172420000,2H,1H,-1,klj34oi2-8frk-2343-21kk-324ljklewlr3\nsurvey2,1584291600000,2H,1H,-1,klj34oi2-8frk-2343-21kk-324ljklewlr3\n</code></pre></p>"},{"location":"setup/configuration/#device-data-source-configuration","title":"Device Data Source Configuration","text":"<p>You might need to modify the following config keys in your <code>config.yaml</code> depending on what devices your participants used and where you are storing your data. You can ignore <code>[PHONE_DATA_CONFIGURATION]</code> or <code>[FITBIT_DATA_CONFIGURATION]</code> if you are not working with either devices.</p> Phone <p>The relevant <code>config.yaml</code> section looks like this by default:</p> <pre><code>PHONE_DATA_CONFIGURATION:\n  SOURCE: \n    TYPE: DATABASE\n    DATABASE_GROUP: *database_group\n    DEVICE_ID_COLUMN: device_id # column name\n  TIMEZONE: \n    TYPE: SINGLE # SINGLE (MULTIPLE support coming soon)\n    VALUE: *timezone\n</code></pre> <p>Parameters for <code>[PHONE_DATA_CONFIGURATION]</code></p> Key Description <code>[SOURCE] [TYPE]</code> Only <code>DATABASE</code> is supported (phone data will be pulled from a database) <code>[SOURCE] [DATABASE_GROUP]</code> <code>*database_group</code>  points to the value defined before in  Database credentials <code>[SOURCE] [DEVICE_ID_COLUMN]</code> A column that contains strings that uniquely identify smartphones. For data collected with AWARE this is usually  <code>device_id</code> <code>[TIMEZONE] [TYPE]</code> Only <code>SINGLE</code> is supported for now <code>[TIMEZONE] [VALUE]</code> <code>*timezone</code>  points to the value defined before in  Timezone of your study Fitbit <p>The relevant <code>config.yaml</code> section looks like this by default:</p> <pre><code>FITBIT_DATA_CONFIGURATION:\n  SOURCE: \n    TYPE: DATABASE # DATABASE or FILES (set each [FITBIT_SENSOR][TABLE] attribute with a table name or a file path accordingly)\n    COLUMN_FORMAT: JSON # JSON or PLAIN_TEXT\n    DATABASE_GROUP: *database_group\n    DEVICE_ID_COLUMN: device_id # column name\n  TIMEZONE: \n    TYPE: SINGLE # Fitbit devices don't support time zones so we read this data in the timezone indicated by VALUE \n    VALUE: *timezone\n</code></pre> <p>Parameters for For <code>[FITBIT_DATA_CONFIGURATION]</code></p> Key Description <code>[SOURCE]</code> <code>[TYPE]</code> <code>DATABASE</code> or <code>FILES</code>  (set each <code>[FITBIT_SENSOR]</code> <code>[TABLE]</code> attribute accordingly with a table name or a file path) <code>[SOURCE]</code> <code>[COLUMN_FORMAT]</code> <code>JSON</code> or <code>PLAIN_TEXT</code>. Column format of the source data. If you pulled your data directly from the Fitbit API the column containing the sensor data will be in <code>JSON</code> format <code>[SOURCE]</code> <code>[DATABASE_GROUP]</code> <code>*database_group</code>  points to the value defined before in  Database credentials. Only used if  <code>[TYPE]</code>  is  <code>DATABASE</code> . <code>[SOURCE]</code> <code>[DEVICE_ID_COLUMN]</code> A column that contains strings that uniquely identify Fitbit devices. <code>[TIMEZONE]</code> <code>[TYPE]</code> Only <code>SINGLE</code> is supported  (Fitbit devices always store data in local time). <code>[TIMEZONE]</code> <code>[VALUE]</code> <code>*timezone</code>  points to the value defined before in  Timezone of your study"},{"location":"setup/configuration/#sensor-and-features-to-process","title":"Sensor and Features to Process","text":"<p>Finally, you need to modify the <code>config.yaml</code> section of the sensors you want to extract behavioral features from. All sensors follow the same naming nomenclature (<code>DEVICE_SENSOR</code>) and parameter structure which we explain in the Behavioral Features Introduction. </p> <p>Done</p> <p>Head over to Execution to learn how to execute RAPIDS.</p>"},{"location":"setup/execution/","title":"Execution","text":"<p>After you have installed and configured RAPIDS, use the following command to execute it.</p> <pre><code>./rapids -j1\n</code></pre> <p>Ready to extract behavioral features</p> <p>If you are ready to extract features head over to the Behavioral Features Introduction</p> <p>Info</p> <p>The script <code>./rapids</code> is a wrapper around Snakemake so you can pass any parameters that Snakemake accepts (e.g. <code>-j1</code>). </p> <p>Updating RAPIDS output after modifying <code>config.yaml</code></p> <p>Any changes to the <code>config.yaml</code> file will be applied automatically and only the relevant files will be updated. This means that after modifying the features list for <code>PHONE_MESSAGE</code> for example, RAPIDS will update the output file with the correct features.</p> <p>Multi-core</p> <p>You can run RAPIDS over multiple cores by modifying the <code>-j</code> argument (e.g. use <code>-j8</code> to use 8 cores). However, take into account that this means multiple sensor datasets for different participants will be load in memory at the same time. If RAPIDS crashes because it ran out of memory reduce the number of cores and try again.</p> <p>As reference, we have run RAPIDS over 12 cores and 32 Gb of RAM without problems for a study with 200 participants with 14 days of low-frequency smartphone data (no accelerometer, gyroscope, or magnetometer).</p> <p>Forcing a complete rerun</p> <p>If you want to update your data from your database or rerun the whole pipeline from scratch run one or both of the following commands depending on the devices you are using:</p> <pre><code>./rapids -j1 -R download_phone_data\n./rapids -j1 -R download_fitbit_data\n</code></pre> <p>Deleting RAPIDS output</p> <p>If you  want to delete all the output files RAPIDS produces you can execute the following command:</p> <pre><code>./rapids -j1 --delete-all-output\n</code></pre>"},{"location":"setup/installation/","title":"Installation","text":"<p>You can install RAPIDS using Docker (the fastest), or native instructions for MacOS and Ubuntu</p> Docker <ol> <li> <p>Install Docker</p> </li> <li> <p>Pull our RAPIDS container     <pre><code>docker pull agamk/rapids:latest`\n</code></pre></p> </li> <li> <p>Run RAPIDS' container (after this step is done you should see a     prompt in the main RAPIDS folder with its python environment active)</p> <pre><code>docker run -it agamk/rapids:latest\n</code></pre> </li> <li> <p>Pull the latest version of RAPIDS</p> <pre><code>git pull\n</code></pre> </li> <li> <p>Make RAPIDS script executable     <pre><code>chmod +x rapids\n</code></pre></p> </li> <li> <p>Check that RAPIDS is working     <pre><code>./rapids -j1\n</code></pre></p> </li> <li> <p>Optional. You can edit RAPIDS files with <code>vim</code> but we recommend using <code>Visual Studio Code</code> and its <code>Remote Containers</code> extension</p> How to configure Remote Containers extension <ul> <li>Make sure RAPIDS container is running</li> <li>Install the Remote - Containers extension</li> <li>Go to the <code>Remote Explorer</code> panel on the left hand sidebar</li> <li>On the top right dropdown menu choose <code>Containers</code></li> <li>Double click on the <code>agamk/rapids</code> container in the<code>CONTAINERS</code> tree</li> <li>A new VS Code session should open on RAPIDS main folder insidethe container.</li> </ul> </li> </ol> MacOS <p>We tested these instructions in Catalina</p> <ol> <li> <p>Install brew</p> </li> <li> <p>Install MySQL</p> <pre><code>brew install mysql\nbrew services start mysql\n</code></pre> </li> <li> <p>Install R 4.0, pandoc and rmarkdown. If you have other instances of R, we recommend uninstalling them</p> <pre><code>brew install r\nbrew install pandoc\nRscript --vanilla -e 'install.packages(\"rmarkdown\", repos=\"http://cran.us.r-project.org\")'\n</code></pre> </li> <li> <p>Install miniconda (restart your terminal afterwards)</p> <pre><code>brew cask install miniconda\nconda init zsh # (or conda init bash)\n</code></pre> </li> <li> <p>Clone our repo</p> <pre><code>git clone https://github.com/carissalow/rapids\n</code></pre> </li> <li> <p>Create a python virtual environment</p> <pre><code>cd rapids\nconda env create -f environment.yml -n rapids\nconda activate rapids\n</code></pre> </li> <li> <p>Install R packages and virtual environment:</p> <pre><code>snakemake -j1 renv_install\nsnakemake -j1 renv_restore\n</code></pre> <p>Note</p> <p>This step could take several minutes to complete, especially if you have less than 3Gb of RAM or packages need to be compiled from source. Please be patient and let it run until completion.</p> </li> <li> <p>Make RAPIDS script executable     <pre><code>chmod +x rapids\n</code></pre></p> </li> <li> <p>Check that RAPIDS is working     <pre><code>./rapids -j1\n</code></pre></p> </li> </ol> Ubuntu <p>We tested on Ubuntu 18.04 &amp; 20.04</p> <ol> <li> <p>Install dependencies</p> <pre><code>sudo apt install libcurl4-openssl-dev\nsudo apt install libssl-dev\nsudo apt install libxml2-dev\n</code></pre> </li> <li> <p>Install MySQL</p> <pre><code>sudo apt install libmysqlclient-dev\nsudo apt install mysql-server\n</code></pre> </li> <li> <p>Add key for R\u2019s repository.</p> <pre><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9\n</code></pre> </li> <li> <p>Add R\u2019s repository</p> <ol> <li> <p>For 18.04   <pre><code>sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'\n</code></pre></p> </li> <li> <p>For 20.04 <pre><code>sudo add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/'\n</code></pre></p> </li> </ol> </li> <li> <p>Install R 4.0. If you have other instances of R, we recommend uninstalling them</p> <pre><code>sudo apt update\nsudo apt install r-base\n</code></pre> </li> <li> <p>Install Pandoc and rmarkdown</p> <pre><code>sudo apt install pandoc\nRscript --vanilla -e 'install.packages(\"rmarkdown\", repos=\"http://cran.us.r-project.org\")'\n</code></pre> </li> <li> <p>Install git</p> <pre><code>sudo apt install git\n</code></pre> </li> <li> <p>Install miniconda</p> </li> <li> <p>Restart your current shell</p> </li> <li> <p>Clone our repo:</p> <pre><code>git clone https://github.com/carissalow/rapids\n</code></pre> </li> <li> <p>Create a python virtual environment:</p> <pre><code>cd rapids\nconda env create -f environment.yml -n MY_ENV_NAME\nconda activate MY_ENV_NAME\n</code></pre> </li> <li> <p>Install R packages and virtual environment:</p> <pre><code>snakemake -j1 renv_install\nsnakemake -j1 renv_restore\n</code></pre> <p>Note</p> <p>This step could take several minutes to complete, especially if you have less than 3Gb of RAM or packages need to be compiled from source. Please be patient and let it run until completion.</p> </li> <li> <p>Make RAPIDS script executable     <pre><code>chmod +x rapids\n</code></pre></p> </li> <li> <p>Check that RAPIDS is working     <pre><code>./rapids -j1\n</code></pre></p> </li> </ol>"},{"location":"visualizations/data-quality-visualizations/","title":"Data Quality Visualizations","text":"<p>We showcase these visualizations with a test study that collected 14 days of smartphone and Fitbit data from two participants (t01 and t02) and extracted behavioral features within five time segments (daily, morning, afternoon, evening, and night).</p> <p>Note</p> <p>Time segments (e.g. <code>daily</code>, <code>morning</code>, etc.) can have multiple instances (day 1, day 2, or morning 1, morning 2, etc.)</p>"},{"location":"visualizations/data-quality-visualizations/#1-histograms-of-phone-data-yield","title":"1. Histograms of phone data yield","text":"<p>RAPIDS provides two histograms that show the number of time segment instances that had a certain ratio of valid yielded minutes and hours, respectively. A valid yielded minute has at least 1 row of data from any smartphone sensor and a valid yielded hour contains at least M valid minutes.</p> <p>These plots can be used as a rough indication of the smartphone monitoring coverage during a study aggregated across all participants. For example, the figure below shows a valid yielded minutes histogram for daily segments and we can infer that the monitoring coverage was very good since almost all segments contain at least 90 to 100% of the expected sensed minutes.</p> <p>Example</p> <p>Click here to see an example of these interactive visualizations in HTML format</p> Histogram of the data yielded minute ratio for a single participant during five time segments (daily, afternoon, evening, and night)"},{"location":"visualizations/data-quality-visualizations/#2-heatmaps-of-overall-data-yield","title":"2. Heatmaps of overall data yield","text":"<p>These heatmaps are a break down per time segment and per participant of Visualization 1. Heatmap\u2019s rows represent participants, columns represent time segment instances and the cells\u2019 color represent the valid yielded minute or hour ratio for a participant during a time segment instance.</p> <p>As different participants might join a study on different dates and time segments can be of any length and start on any day, the x-axis is labelled with the time delta between the start of each time segment instance minus the start of the first instance. These plots provide a quick study overview of the monitoring coverage per person and per time segment. </p> <p>The figure below shows the heatmap of the valid yielded minute ratio for participants t01 and t02 on daily segments and, as we inferred from the previous histogram, the lighter (yellow) color on most time segment instances (cells) indicate both phones sensed data without interruptions for most days (except for the first and last ones).</p> <p>Example</p> <p>Click here to see an example of these interactive visualizations in HTML format</p> Overall compliance heatmap for all participants"},{"location":"visualizations/data-quality-visualizations/#3-heatmap-of-recorded-phone-sensors","title":"3. Heatmap of recorded phone sensors","text":"<p>In these heatmaps rows represent time segment instances, columns represent minutes since the start of a time segment instance, and cells\u2019 color shows the number of phone sensors that logged at least one row of data during those 1-minute windows. </p> <p>RAPIDS creates a plot per participant and per time segment and can be used as a rough indication of whether time-based sensors were following their sensing schedule (e.g. if location was being sensed every 2 minutes).</p> <p>The figure below shows this heatmap for phone sensors collected by participant t01 in daily time segments from Apr 23<sup>rd</sup> 2020 to May 4<sup>th</sup> 2020. We can infer that for most of the monitoring time, the participant\u2019s phone logged data from at least 8 sensors each minute.</p> <p>Example</p> <p>Click here to see an example of these interactive visualizations in HTML format</p> Heatmap of the recorded phone sensors per minute and per time segment of a single participant"},{"location":"visualizations/data-quality-visualizations/#4-heatmap-of-sensor-row-count","title":"4. Heatmap of sensor row count","text":"<p>These heatmaps are a per-sensor breakdown of Visualization 1 and Visualization 2. Note that the second row (ratio of valid yielded minutes) of this heatmap matches the respective participant (bottom) row the screenshot in Visualization 2.</p> <p>In these heatmaps rows represent phone or Fitbit sensors, columns represent time segment instances and cell\u2019s color shows the normalized (0 to 1) row count of each sensor within a time segment instance. RAPIDS creates one heatmap per participant and they can be used to judge missing data on a per participant and per sensor basis.</p> <p>The figure below shows data for 16 phone sensors (including data yield) of t01\u2019s daily segments (only half of the sensor names and dates are visible in the screenshot but all can be accessed in the interactive plot). From the top two rows, we can see that the phone was sensing data for most of the monitoring period (as suggested by Figure 3 and Figure 4). We can also infer how phone usage influenced the different sensor streams; there are peaks of screen events during the first day (Apr 23<sup>rd</sup>), peaks of location coordinates on Apr 26<sup>th</sup> and Apr 30<sup>th</sup>, and no sent or received SMS except for Apr 23<sup>rd</sup>, Apr 29<sup>th</sup> and Apr 30<sup>th</sup> (unlabeled row between screen and locations).</p> <p>Example</p> <p>Click here to see an example of these interactive visualizations in HTML format</p> Heatmap of the sensor row count per time segment of a single participant"},{"location":"visualizations/feature-visualizations/","title":"Feature Visualizations","text":""},{"location":"visualizations/feature-visualizations/#1-heatmap-correlation-matrix","title":"1. Heatmap Correlation Matrix","text":"<p>Columns and rows are the behavioral features computed in RAPIDS, cells\u2019 color represents the correlation coefficient between all days of data for every pair of features of all participants. </p> <p>The user can specify a minimum number of observations (time segment instances) required to compute the correlation between two features using the <code>MIN_ROWS_RATIO</code> parameter (0.5 by default) and the correlation method (Pearson, Spearman or Kendall) with the <code>CORR_METHOD</code> parameter. In addition, this plot can be configured to only display correlation coefficients above a threshold using the <code>CORR_THRESHOLD</code> parameter (0.1 by default).</p> <p>Example</p> <p>Click here to see an example of these interactive visualizations in HTML format</p> Correlation matrix heatmap for all the features of all participants"},{"location":"workflow-examples/analysis/","title":"Analysis Workflow Example","text":"<p>TL;DR</p> <ul> <li>In addition to using RAPIDS to extract behavioral features and create plots, you can structure your data analysis within RAPIDS (i.e. cleaning your features and creating ML/statistical models)</li> <li>We include an analysis example in RAPIDS that covers raw data processing, cleaning, feature extraction, machine learning modeling, and evaluation</li> <li>Use this example as a guide to structure your own analysis within RAPIDS</li> <li>RAPIDS analysis workflows are compatible with your favorite data science tools and libraries</li> <li>RAPIDS analysis workflows are reproducible and we encourage you to publish them along with your research papers</li> </ul>"},{"location":"workflow-examples/analysis/#why-should-i-integrate-my-analysis-in-rapids","title":"Why should I integrate my analysis in RAPIDS?","text":"<p>Even though the bulk of RAPIDS current functionality is related to the computation of behavioral features, we recommend RAPIDS as a complementary tool to create a mobile data analysis workflow. This is because the cookiecutter data science file organization guidelines, the use of Snakemake, the provided behavioral features, and the reproducible R and Python development environments allow researchers to divide an analysis workflow into small parts that can be audited, shared in an online repository, reproduced in other computers, and understood by other people as they follow a familiar and consistent structure. We believe these advantages outweigh the time needed to learn how to create these workflows in RAPIDS.</p> <p>We clarify that to create analysis workflows in RAPIDS, researchers can still use any data manipulation tools, editors, libraries or languages they are already familiar with. RAPIDS is meant to be the final destination of analysis code that was developed in interactive notebooks or stand-alone scripts. For example, a user can compute call and location features using RAPIDS, then, they can use Jupyter notebooks to explore feature cleaning approaches and once the cleaning code is final, it can be moved to RAPIDS as a new step in the pipeline. In turn, the output of this cleaning step can be used to explore machine learning models and once a model is finished, it can also be transferred to RAPIDS as a step of its own. The idea is that when it is time to publish a piece of research, a RAPIDS workflow can be shared in a public repository as is.</p> <p>In the following sections we share an example of how we structured an analysis workflow in RAPIDS.</p>"},{"location":"workflow-examples/analysis/#analysis-workflow-structure","title":"Analysis workflow structure","text":"<p>To accurately reflect the complexity of a real-world modeling scenario, we decided not to oversimplify this example. Importantly, every step in this example follows a basic structure: an input file and parameters are manipulated by an R or Python script that saves the results to an output file. Input files, parameters, output files and scripts are grouped into Snakemake rules that are described on <code>smk</code> files in the rules folder (we point the reader to the relevant rule(s) of each step). </p> <p>Researchers can use these rules and scripts as a guide to create their own as it is expected every modeling project will have different requirements, data and goals but ultimately most follow a similar chainned pattern.</p> <p>Hint</p> <p>The example\u2019s config file is <code>example_profile/example_config.yaml</code> and its Snakefile is in <code>example_profile/Snakefile</code>. The config file is already configured to process the sensor data as explained in Analysis workflow modules.</p>"},{"location":"workflow-examples/analysis/#description-of-the-study-modeled-in-our-analysis-workflow-example","title":"Description of the study modeled in our analysis workflow example","text":"<p>Our example is based on a hypothetical study that recruited 2 participants that underwent surgery and collected mobile data for at least one week before and one week after the procedure. Participants wore a Fitbit device and installed the AWARE client in their personal Android and iOS smartphones to collect mobile data 24/7. In addition, participants completed daily severity ratings of 12 common symptoms on a scale from 0 to 10 that we summed up into a daily symptom burden score. </p> <p>The goal of this workflow is to find out if we can predict the daily symptom burden score of a participant. Thus, we framed this question as a binary classification problem with two classes, high and low symptom burden based on the scores above and below average of each participant. We also want to compare the performance of individual (personalized) models vs a population model. </p> <p>In total, our example workflow has nine steps that are in charge of sensor data preprocessing, feature extraction, feature cleaning, machine learning model training and model evaluation (see figure below). We ship this workflow with RAPIDS and share a database with test data in an Open Science Framework repository. </p> Modules of RAPIDS example workflow, from raw data to model evaluation"},{"location":"workflow-examples/analysis/#configure-and-run-the-analysis-workflow-example","title":"Configure and run the analysis workflow example","text":"<ol> <li>Install RAPIDS</li> <li>Configure the user credentials of a local or remote MySQL server with writing permissions in your <code>.env</code> file. The example config file is at <code>example_profile/example_config.yaml</code>.</li> <li>Unzip the test database to <code>data/external/rapids_example.sql</code> and run:     <pre><code>./rapids -j1 restore_sql_file --profile example_profile\n</code></pre></li> <li>Create the participant files for this example by running:     <pre><code>./rapids -j1 create_example_participant_files\n</code></pre></li> <li>Run the example pipeline with:     <pre><code>./rapids -j1 --profile example_profile\n</code></pre></li> </ol>"},{"location":"workflow-examples/analysis/#modules-of-our-analysis-workflow-example","title":"Modules of our analysis workflow example","text":"1. Feature extraction <p>We extract daily behavioral features for data yield, received and sent messages, missed, incoming and outgoing calls, resample fused location data using Doryab provider, activity recognition, battery, Bluetooth, screen, light, applications foreground, conversations, Wi-Fi connected, Wi-Fi visible, Fitbit heart rate summary and intraday data, Fitbit sleep summary data, and Fitbit step summary and intraday data without excluding sleep periods with an active bout threshold of 10 steps. In total, we obtained 237 daily sensor features over 12 days per participant. </p> 2. Extract demographic data. <p>It is common to have demographic data in addition to mobile and target (ground truth) data. In this example we include participants\u2019 age, gender and the number of days they spent in hospital after their surgery as features in our model. We extract these three columns from the participant_info table of our test database . As these three features remain the same within participants, they are used only on the population model. Refer to the <code>demographic_features</code> rule in <code>rules/models.smk</code>.</p> 3. Create target labels. <p>The two classes for our machine learning binary classification problem are high and low symptom burden. Target values are already stored in the <code>participant_target</code> table of our test database and transferred to a CSV file. A new rule/script can be created if further manipulation is necessary. Refer to the <code>parse_targets</code> rule in <code>rules/models.smk</code>.</p> 4. Feature merging. <p>These daily features are stored on a CSV file per sensor, a CSV file per participant, and a CSV file including all features from all participants (in every case each column represents a feature and each row represents a day). Refer to the <code>merge_sensor_features_for_individual_participants</code> and <code>merge_features_for_population_model</code> rules in <code>rules/features.smk</code>.</p> 5. Data visualization. <p>At this point the user can use the five plots RAPIDS provides (or implement new ones) to explore and understand the quality of the raw data and extracted features and decide what sensors, days, or participants to include and exclude. Refer to <code>rules/reports.smk</code> to find the rules that generate these plots.</p> 6. Feature cleaning. <p>In this stage we perform four steps to clean our sensor feature file. First, we discard days with a data yield hour ratio less than or equal to 0.75, i.e. we include days with at least 18 hours of data. Second, we drop columns (features) with more than 30% of missing rows. Third, we drop columns with zero variance. Fourth, we drop rows (days) with more than 30% of missing columns (features). In this cleaning stage several parameters are created and exposed in <code>example_profile/example_config.yaml</code>. </p> <p>After this step, we kept 162 features over 11 days for the individual model of p01, 107 features over 12 days for the individual model of p02 and 101 features over 20 days for the population model. Note that the difference in the number of features between p01 and p02 is mostly due to iOS restrictions that stops researchers from collecting the same number of sensors than in Android phones. </p> <p>Feature cleaning for the individual models is done in the <code>clean_sensor_features_for_individual_participants</code> rule and for the population model in the <code>clean_sensor_features_for_all_participants</code> rule in <code>rules/models.smk</code>.</p> 7. Merge features and targets. <p>In this step we merge the cleaned features and target labels for our individual models in the <code>merge_features_and_targets_for_individual_model</code> rule in <code>rules/models.smk</code>. Additionally, we merge the cleaned features, target labels, and demographic features of our two participants for the population model in the <code>merge_features_and_targets_for_population_model</code> rule in <code>rules/models.smk</code>. These two merged files are the input for our individual and population models. </p> 8. Modelling. <p>This stage has three phases: model building, training and evaluation. </p> <p>In the building phase we impute, normalize and oversample our dataset.  Missing numeric values in each column are imputed with their mean and we impute missing categorical values with their mode. We normalize each numeric column with one of three strategies (min-max, z-score, and scikit-learn package\u2019s robust scaler) and we one-hot encode each categorial feature as a numerical array. We oversample our imbalanced dataset using SMOTE (Synthetic Minority Over-sampling Technique) or a Random Over sampler from scikit-learn. All these parameters are exposed in <code>example_profile/example_config.yaml</code>.</p> <p>In the training phase, we create eight models: logistic regression, k-nearest neighbors, support vector machine, decision tree, random forest, gradient boosting classifier, extreme gradient boosting classifier and a light gradient boosting machine. We cross-validate each model with an inner cycle to tune hyper-parameters based on the Macro F1 score and an outer cycle to predict the test set on a model with the best hyper-parameters. Both cross-validation cycles use a leave-one-out strategy. Parameters for each model like weights and learning rates are exposed in <code>example_profile/example_config.yaml</code>.</p> <p>Finally, in the evaluation phase we compute the accuracy, Macro F1, kappa, area under the curve and per class precision, recall and F1 score of all folds of the outer cross-validation cycle.</p> <p>Refer to the <code>modelling_for_individual_participants</code> rule for the individual modeling and to the <code>modelling_for_all_participants</code> rule for the population modeling, both in <code>rules/models.smk</code>.</p> 9. Compute model baselines. <p>We create three baselines to evaluate our classification models.</p> <p>First, a majority classifier that labels each test sample with the majority class of our training data. Second, a random weighted classifier that predicts each test observation sampling at random from a binomial distribution based on the ratio of our target labels. Third, a decision tree classifier based solely on the demographic features of each participant. As we do not have demographic features for individual model, this baseline is only available for population model. </p> <p>Our baseline metrics (e.g. accuracy, precision, etc.) are saved into a CSV file, ready to be compared to our modeling results. Refer to the <code>baselines_for_individual_model</code> rule for the individual model baselines and to the <code>baselines_for_population_model</code> rule for population model baselines, both in <code>rules/models.smk</code>.</p>"},{"location":"workflow-examples/minimal/","title":"Minimal Working Example","text":"<p>This is a quick guide for creating and running a simple pipeline to extract missing, outgoing, and incoming call features for <code>daily</code> and <code>night</code> epochs of one participant monitored on the US East coast.</p> <ol> <li>Install RAPIDS and make sure your <code>conda</code> environment is active (see Installation)</li> <li> <p>Make the changes listed below for the corresponding Configuration step (we provide an example of what the relevant sections in your <code>config.yml</code> will look like after you are done)</p> Things to change on each configuration step <p>1. Setup your database connection credentials in <code>.env</code>. We assume your credentials group is called <code>MY_GROUP</code>.</p> <p>2. <code>America/New_York</code> should be the default timezone</p> <p>3. Create a participant file <code>p01.yaml</code> based on one of your participants and add <code>p01</code> to <code>[PIDS]</code> in <code>config.yaml</code>. The following would be the content of your <code>p01.yaml</code> participant file:     <pre><code>PHONE:\n    DEVICE_IDS: [aaaaaaaa-1111-bbbb-2222-cccccccccccc] # your participant's AWARE device id\n    PLATFORMS: [android] # or ios\n    LABEL: MyTestP01 # any string\n    START_DATE: 2020-01-01 # this can also be empty\n    END_DATE: 2021-01-01 # this can also be empty\n</code></pre></p> <p>4. <code>[TIME_SEGMENTS][TYPE]</code> should be the default <code>PERIODIC</code>. Change <code>[TIME_SEGMENTS][FILE]</code> with the path of a file containing the following lines:      <pre><code>label,start_time,length,repeats_on,repeats_value\ndaily,00:00:00,23H 59M 59S,every_day,0\nnight,00:00:00,5H 59M 59S,every_day,0\n</code></pre></p> <p>5. If you collected data with AWARE you won\u2019t need to modify the attributes of <code>[DEVICE_DATA][PHONE]</code></p> <p>6. Set <code>[PHONE_CALLS][PROVIDERS][RAPIDS][COMPUTE]</code> to <code>True</code></p> Example of the <code>config.yaml</code> sections after the changes outlined above <pre><code>PIDS: [p01]\n\nTIMEZONE: &amp;timezone\nAmerica/New_York\n\nDATABASE_GROUP: &amp;database_group\nMY_GROUP\n\n# ... other irrelevant sections\n\nTIME_SEGMENTS: &amp;time_segments\n    TYPE: PERIODIC\n    FILE: \"data/external/timesegments_periodic.csv\" # make sure the three lines specified above are in the file\n    INCLUDE_PAST_PERIODIC_SEGMENTS: FALSE\n\n# No need to change this if you collected AWARE data on a database and your credentials are grouped under `MY_GROUP` in `.env`\nDEVICE_DATA:\n    PHONE:\n        SOURCE: \n            TYPE: DATABASE\n            DATABASE_GROUP: *database_group\n            DEVICE_ID_COLUMN: device_id # column name\n        TIMEZONE: \n            TYPE: SINGLE # SINGLE or MULTIPLE\n            VALUE: *timezone \n\n\n############## PHONE ###########################################################\n################################################################################\n\n# ... other irrelevant sections\n\n# Communication call features config, TYPES and FEATURES keys need to match\nPHONE_CALLS:\n    TABLE: calls # change if your calls table has a different name\n    PROVIDERS:\n        RAPIDS:\n            COMPUTE: True # set this to True!\n            CALL_TYPES: ...\n</code></pre> </li> <li> <p>Run RAPIDS     <pre><code>./rapids -j1\n</code></pre></p> </li> <li>The call features for daily and morning time segments will be in     <pre><code>/data/processed/features/p01/phone_calls.csv\n</code></pre></li> </ol>"}]}